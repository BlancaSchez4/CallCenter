
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.QuejaData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Queja Data Access Object
    /// File                    : QuejaDAO.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:37 p. m.
    ///</summary>
    public class QuejaData : QuejaProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="Queja"> Object Queja added to List</param>
        public override int AddQueja(QuejaEntity entity_Queja)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_QuejaAdd", connection);

                AssingParameter(comandoSql, "@Clv_Queja", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@Clv_TipSer", entity_Queja.Clv_TipSer);

                AssingParameter(comandoSql, "@Contrato", entity_Queja.Contrato);

                AssingParameter(comandoSql, "@Fecha_Soliciutud", entity_Queja.Fecha_Soliciutud);

                AssingParameter(comandoSql, "@Fecha_Ejecucion", entity_Queja.Fecha_Ejecucion);

                AssingParameter(comandoSql, "@Observaciones", entity_Queja.Observaciones);

                AssingParameter(comandoSql, "@Status", entity_Queja.Status);

                AssingParameter(comandoSql, "@Clave_Tecnico", entity_Queja.Clave_Tecnico);

                AssingParameter(comandoSql, "@Problema", entity_Queja.Problema);

                AssingParameter(comandoSql, "@Solucion", entity_Queja.Solucion);

                AssingParameter(comandoSql, "@Fecha_Actualizacion", entity_Queja.Fecha_Actualizacion);

                AssingParameter(comandoSql, "@Fecha_Captura", entity_Queja.Fecha_Captura);

                AssingParameter(comandoSql, "@Clv_TipoQueja", entity_Queja.Clv_TipoQueja);

                AssingParameter(comandoSql, "@Imp", entity_Queja.Imp);

                AssingParameter(comandoSql, "@Clasificacion", entity_Queja.Clasificacion);

                AssingParameter(comandoSql, "@Hora_Ejecucion", entity_Queja.Hora_Ejecucion);

                AssingParameter(comandoSql, "@Clv_Trabajo", entity_Queja.Clv_Trabajo);

                AssingParameter(comandoSql, "@Impresa", entity_Queja.Impresa);

                AssingParameter(comandoSql, "@Visita1", entity_Queja.Visita1);

                AssingParameter(comandoSql, "@Visita2", entity_Queja.Visita2);

                AssingParameter(comandoSql, "@Visita3", entity_Queja.Visita3);

                AssingParameter(comandoSql, "@clvPrioridadQueja", entity_Queja.clvPrioridadQueja);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding Queja " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@Clv_Queja"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a Queja
        ///</summary>
        /// <param name="">  Clv_Queja to delete </param>
        public override int DeleteQueja(long? Clv_Queja)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_QuejaDelete", connection);

                AssingParameter(comandoSql, "@Clv_Queja", Clv_Queja);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting Queja " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a Queja
        ///</summary>
        /// <param name="Queja"> Objeto Queja a editar </param>
        public override int EditQueja(QuejaEntity entity_Queja)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_QuejaEdit", connection);

                AssingParameter(comandoSql, "@Clv_Queja", entity_Queja.Clv_Queja);

                AssingParameter(comandoSql, "@Clv_TipSer", entity_Queja.Clv_TipSer);

                AssingParameter(comandoSql, "@Contrato", entity_Queja.Contrato);

                AssingParameter(comandoSql, "@Fecha_Soliciutud", entity_Queja.Fecha_Soliciutud);

                AssingParameter(comandoSql, "@Fecha_Ejecucion", entity_Queja.Fecha_Ejecucion);

                AssingParameter(comandoSql, "@Observaciones", entity_Queja.Observaciones);

                AssingParameter(comandoSql, "@Status", entity_Queja.Status);

                AssingParameter(comandoSql, "@Clave_Tecnico", entity_Queja.Clave_Tecnico);

                AssingParameter(comandoSql, "@Problema", entity_Queja.Problema);

                AssingParameter(comandoSql, "@Solucion", entity_Queja.Solucion);

                AssingParameter(comandoSql, "@Fecha_Actualizacion", entity_Queja.Fecha_Actualizacion);

                AssingParameter(comandoSql, "@Fecha_Captura", entity_Queja.Fecha_Captura);

                AssingParameter(comandoSql, "@Clv_TipoQueja", entity_Queja.Clv_TipoQueja);

                AssingParameter(comandoSql, "@Imp", entity_Queja.Imp);

                AssingParameter(comandoSql, "@Clasificacion", entity_Queja.Clasificacion);

                AssingParameter(comandoSql, "@Hora_Ejecucion", entity_Queja.Hora_Ejecucion);

                AssingParameter(comandoSql, "@Clv_Trabajo", entity_Queja.Clv_Trabajo);

                AssingParameter(comandoSql, "@Impresa", entity_Queja.Impresa);

                AssingParameter(comandoSql, "@Visita1", entity_Queja.Visita1);

                AssingParameter(comandoSql, "@Visita2", entity_Queja.Visita2);

                AssingParameter(comandoSql, "@Visita3", entity_Queja.Visita3);

                AssingParameter(comandoSql, "@clvPrioridadQueja", entity_Queja.clvPrioridadQueja);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating Queja " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all Queja
        ///</summary>
        public override List<QuejaEntity> GetQueja()
        {
            List<QuejaEntity> QuejaList = new List<QuejaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_QuejaGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        QuejaList.Add(GetQuejaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Queja " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return QuejaList;
        }

        /// <summary>
        /// Gets all Queja by List<int>
        ///</summary>
        public override List<QuejaEntity> GetQueja(List<long> lid)
        {
            List<QuejaEntity> QuejaList = new List<QuejaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_QuejaGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        QuejaList.Add(GetQuejaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Queja " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return QuejaList;
        }

        /// <summary>
        /// Gets Queja by
        ///</summary>
        public override QuejaEntity GetQuejaById(long? Clv_Queja)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_QuejaGetById", connection);
                QuejaEntity entity_Queja = null;


                AssingParameter(comandoSql, "@Clv_Queja", Clv_Queja);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_Queja = GetQuejaFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Queja " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_Queja;
            }

        }


        public override List<QuejaEntity> GetQuejaByClv_Queja(long? Clv_Queja)
        {
            List<QuejaEntity> QuejaList = new List<QuejaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_QuejaGetByClv_Queja", connection);

                AssingParameter(comandoSql, "@Clv_Queja", Clv_Queja);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        QuejaList.Add(GetQuejaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Queja " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return QuejaList;
        }


        /// <summary>
        ///Get Queja
        ///</summary>
        public override SoftvList<QuejaEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<QuejaEntity> entities = new SoftvList<QuejaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_QuejaGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetQuejaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Queja " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetQuejaCount();
                return entities ?? new SoftvList<QuejaEntity>();
            }
        }

        /// <summary>
        ///Get Queja
        ///</summary>
        public override SoftvList<QuejaEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<QuejaEntity> entities = new SoftvList<QuejaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_QuejaGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetQuejaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Queja " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetQuejaCount(xml);
                return entities ?? new SoftvList<QuejaEntity>();
            }
        }

        /// <summary>
        ///Get Count Queja
        ///</summary>
        public int GetQuejaCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_QuejaGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Queja " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count Queja
        ///</summary>
        public int GetQuejaCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Queja.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_QuejaGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Queja " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
