
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.COLONIAData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : COLONIA Data Access Object
    /// File                    : COLONIADAO.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:40 p. m.
    ///</summary>
    public class COLONIAData : COLONIAProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="COLONIA"> Object COLONIA added to List</param>
        public override int AddCOLONIA(COLONIAEntity entity_COLONIA)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAAdd", connection);

                AssingParameter(comandoSql, "@Clv_Colonia", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@Nombre", entity_COLONIA.Nombre);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding COLONIA " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@Clv_Colonia"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a COLONIA
        ///</summary>
        /// <param name="">  Clv_Colonia to delete </param>
        public override int DeleteCOLONIA(int? Clv_Colonia)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIADelete", connection);

                AssingParameter(comandoSql, "@Clv_Colonia", Clv_Colonia);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a COLONIA
        ///</summary>
        /// <param name="COLONIA"> Objeto COLONIA a editar </param>
        public override int EditCOLONIA(COLONIAEntity entity_COLONIA)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAEdit", connection);

                AssingParameter(comandoSql, "@Clv_Colonia", entity_COLONIA.Clv_Colonia);

                AssingParameter(comandoSql, "@Nombre", entity_COLONIA.Nombre);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all COLONIA
        ///</summary>
        public override List<COLONIAEntity> GetCOLONIA()
        {
            List<COLONIAEntity> COLONIAList = new List<COLONIAEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        COLONIAList.Add(GetCOLONIAFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return COLONIAList;
        }

        /// <summary>
        /// Gets all COLONIA by List<int>
        ///</summary>
        public override List<COLONIAEntity> GetCOLONIA(List<int> lid)
        {
            List<COLONIAEntity> COLONIAList = new List<COLONIAEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        COLONIAList.Add(GetCOLONIAFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return COLONIAList;
        }

        /// <summary>
        /// Gets COLONIA by
        ///</summary>
        public override COLONIAEntity GetCOLONIAById(int? Clv_Colonia)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAGetById", connection);
                COLONIAEntity entity_COLONIA = null;


                AssingParameter(comandoSql, "@Clv_Colonia", Clv_Colonia);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_COLONIA = GetCOLONIAFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_COLONIA;
            }

        }


        public override List<COLONIAEntity> GetCOLONIAByIdColonia(int? Clv_Colonia)
        {
            List<COLONIAEntity> COLONIAList = new List<COLONIAEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAGetByIdColonia", connection);

                AssingParameter(comandoSql, "@Clv_Colonia", Clv_Colonia);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        COLONIAList.Add(GetCOLONIAFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return COLONIAList;
        }


        public override List<COLONIAEntity> GetCOLONIAByClv_Colonia(int? Clv_Colonia)
        {
            List<COLONIAEntity> COLONIAList = new List<COLONIAEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAGetByClv_Colonia", connection);

                AssingParameter(comandoSql, "@Clv_Colonia", Clv_Colonia);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        COLONIAList.Add(GetCOLONIAFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return COLONIAList;
        }




        /// <summary>
        ///Get COLONIA
        ///</summary>
        public override SoftvList<COLONIAEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<COLONIAEntity> entities = new SoftvList<COLONIAEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetCOLONIAFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetCOLONIACount();
                return entities ?? new SoftvList<COLONIAEntity>();
            }
        }

        /// <summary>
        ///Get COLONIA
        ///</summary>
        public override SoftvList<COLONIAEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<COLONIAEntity> entities = new SoftvList<COLONIAEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetCOLONIAFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetCOLONIACount(xml);
                return entities ?? new SoftvList<COLONIAEntity>();
            }
        }

        /// <summary>
        ///Get Count COLONIA
        ///</summary>
        public int GetCOLONIACount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count COLONIA
        ///</summary>
        public int GetCOLONIACount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.COLONIA.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_COLONIAGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data COLONIA " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
