
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using Softv.Entities;
    using Softv.Providers;
    using SoftvConfiguration;
    using Globals;

    namespace Softv.DAO
    {
    /// <summary>
    /// Class                   : Softv.DAO.Cliente_ApellidoData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Cliente_Apellido Data Access Object
    /// File                    : Cliente_ApellidoDAO.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:30 p. m.
    ///</summary>
    public class Cliente_ApellidoData : Cliente_ApellidoProvider
    {
    /// <summary>
    ///</summary>
    /// <param name="Cliente_Apellido"> Object Cliente_Apellido added to List</param>
    public override int AddCliente_Apellido(Cliente_ApellidoEntity entity_Cliente_Apellido)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Cliente_Apellido.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_Cliente_ApellidoAdd", connection);
    
        AssingParameter(comandoSql, "@Contrato", null, pd: ParameterDirection.Output, IsKey: true);
      
            AssingParameter(comandoSql,"@Nombre",entity_Cliente_Apellido.Nombre);
          
            AssingParameter(comandoSql,"@SegundoNombre",entity_Cliente_Apellido.SegundoNombre);
          
            AssingParameter(comandoSql,"@Apellido_Paterno",entity_Cliente_Apellido.Apellido_Paterno);
          
            AssingParameter(comandoSql,"@Apellido_Materno",entity_Cliente_Apellido.Apellido_Materno);
          
            AssingParameter(comandoSql,"@FechaNacimiento",entity_Cliente_Apellido.FechaNacimiento);
          
            AssingParameter(comandoSql,"@RFC",entity_Cliente_Apellido.RFC);
          
            AssingParameter(comandoSql,"@EsFisica",entity_Cliente_Apellido.EsFisica);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error adding Cliente_Apellido " + ex.Message, ex);
    }
    finally
    {
    connection.Close();
    }
    result = (int)comandoSql.Parameters["@IdCliente_Apellido"].Value;
    }
    return result;
    }

    /// <summary>
    /// Deletes a Cliente_Apellido
    ///</summary>
    /// <param name="">  Contrato to delete </param>
    public override int DeleteCliente_Apellido(long? Contrato)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Cliente_Apellido.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_Cliente_ApellidoDelete", connection);
    
            AssingParameter(comandoSql,"@Contrato",Contrato);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error deleting Cliente_Apellido " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Edits a Cliente_Apellido
    ///</summary>
    /// <param name="Cliente_Apellido"> Objeto Cliente_Apellido a editar </param>
    public override int EditCliente_Apellido(Cliente_ApellidoEntity entity_Cliente_Apellido)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Cliente_Apellido.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_Cliente_ApellidoEdit", connection);
    
            AssingParameter(comandoSql,"@Contrato",entity_Cliente_Apellido.Contrato);
          
            AssingParameter(comandoSql,"@Nombre",entity_Cliente_Apellido.Nombre);
          
            AssingParameter(comandoSql,"@SegundoNombre",entity_Cliente_Apellido.SegundoNombre);
          
            AssingParameter(comandoSql,"@Apellido_Paterno",entity_Cliente_Apellido.Apellido_Paterno);
          
            AssingParameter(comandoSql,"@Apellido_Materno",entity_Cliente_Apellido.Apellido_Materno);
          
            AssingParameter(comandoSql,"@FechaNacimiento",entity_Cliente_Apellido.FechaNacimiento);
          
            AssingParameter(comandoSql,"@RFC",entity_Cliente_Apellido.RFC);
          
            AssingParameter(comandoSql,"@EsFisica",entity_Cliente_Apellido.EsFisica);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    
        result = int.Parse(ExecuteNonQuery(comandoSql).ToString());
          
    }
    catch (Exception ex)
    {
    throw new Exception("Error updating Cliente_Apellido " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Gets all Cliente_Apellido
    ///</summary>
    public override List<Cliente_ApellidoEntity> GetCliente_Apellido()
    {
    List<Cliente_ApellidoEntity> Cliente_ApellidoList = new List<Cliente_ApellidoEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Cliente_Apellido.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_Cliente_ApellidoGet", connection);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    Cliente_ApellidoList.Add(GetCliente_ApellidoFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Cliente_Apellido "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return Cliente_ApellidoList;
    }

    /// <summary>
    /// Gets all Cliente_Apellido by List<int>
    ///</summary>
    public override List<Cliente_ApellidoEntity> GetCliente_Apellido(List<int> lid)
    {
    List<Cliente_ApellidoEntity> Cliente_ApellidoList = new List<Cliente_ApellidoEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Cliente_Apellido.ConnectionString))
    {
    DataTable IdDT = BuildTableID(lid);
    
    SqlCommand comandoSql = CreateCommand("Softv_Cliente_ApellidoGetByIds", connection);
    AssingParameter(comandoSql, "@IdTable", IdDT);
    
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    Cliente_ApellidoList.Add(GetCliente_ApellidoFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Cliente_Apellido "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return Cliente_ApellidoList;
    }

    /// <summary>
    /// Gets Cliente_Apellido by
    ///</summary>
    public override Cliente_ApellidoEntity GetCliente_ApellidoById(long? Contrato)
    {
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Cliente_Apellido.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_Cliente_ApellidoGetById", connection);
    Cliente_ApellidoEntity entity_Cliente_Apellido = null;

    
            AssingParameter(comandoSql,"@Contrato", Contrato);
          
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
    if (rd.Read())
    entity_Cliente_Apellido = GetCliente_ApellidoFromReader(rd);
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Cliente_Apellido "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    return entity_Cliente_Apellido;
    }

    }

    

    /// <summary>
    ///Get Cliente_Apellido
    ///</summary>
    public override SoftvList<Cliente_ApellidoEntity> GetPagedList(int pageIndex, int pageSize)
    {
    SoftvList<Cliente_ApellidoEntity> entities = new SoftvList<Cliente_ApellidoEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Cliente_Apellido.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_Cliente_ApellidoGetPaged", connection);
    
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@pageSize", pageSize);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GetCliente_ApellidoFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Cliente_Apellido " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GetCliente_ApellidoCount();
    return entities ?? new SoftvList<Cliente_ApellidoEntity>();
    }
    }

    /// <summary>
    ///Get Cliente_Apellido
    ///</summary>
    public override SoftvList<Cliente_ApellidoEntity> GetPagedList(int pageIndex, int pageSize,String xml)
    {
    SoftvList<Cliente_ApellidoEntity> entities = new SoftvList<Cliente_ApellidoEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Cliente_Apellido.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_Cliente_ApellidoGetPagedXml", connection);
    
    AssingParameter(comandoSql,"@pageSize", pageSize);
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@xml", xml);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GetCliente_ApellidoFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Cliente_Apellido " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GetCliente_ApellidoCount(xml);
    return entities ?? new SoftvList<Cliente_ApellidoEntity>();
    }
    }

    /// <summary>
    ///Get Count Cliente_Apellido
    ///</summary>
    public int GetCliente_ApellidoCount()
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Cliente_Apellido.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_Cliente_ApellidoGetCount", connection);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Cliente_Apellido " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }


    /// <summary>
    ///Get Count Cliente_Apellido
    ///</summary>
    public int GetCliente_ApellidoCount(String xml)
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Cliente_Apellido.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_Cliente_ApellidoGetCountXml", connection);
    
    AssingParameter(comandoSql,"@xml", xml);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Cliente_Apellido " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }

    #region Customs Methods
    
    #endregion
    }
    }
  