
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.DatoFiscalData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : DatoFiscal Data Access Object
    /// File                    : DatoFiscalDAO.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:31 p. m.
    ///</summary>
    public class DatoFiscalData : DatoFiscalProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="DatoFiscal"> Object DatoFiscal added to List</param>
        public override int AddDatoFiscal(DatoFiscalEntity entity_DatoFiscal)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatoFiscal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatoFiscalAdd", connection);

                AssingParameter(comandoSql, "@Contrato", entity_DatoFiscal.Contrato);

                AssingParameter(comandoSql, "@IVADESGLOSADO", entity_DatoFiscal.IVADESGLOSADO);

                AssingParameter(comandoSql, "@RAZON_SOCIAL", entity_DatoFiscal.RAZON_SOCIAL);

                AssingParameter(comandoSql, "@RFC", entity_DatoFiscal.RFC);

                AssingParameter(comandoSql, "@CALLE_RS", entity_DatoFiscal.CALLE_RS);

                AssingParameter(comandoSql, "@NUMERO_RS", entity_DatoFiscal.NUMERO_RS);

                AssingParameter(comandoSql, "@ENTRECALLES", entity_DatoFiscal.ENTRECALLES);

                AssingParameter(comandoSql, "@COLONIA_RS", entity_DatoFiscal.COLONIA_RS);

                AssingParameter(comandoSql, "@CIUDAD_RS", entity_DatoFiscal.CIUDAD_RS);

                AssingParameter(comandoSql, "@ESTADO_RS", entity_DatoFiscal.ESTADO_RS);

                AssingParameter(comandoSql, "@CP_RS", entity_DatoFiscal.CP_RS);

                AssingParameter(comandoSql, "@TELEFONO_RS", entity_DatoFiscal.TELEFONO_RS);

                AssingParameter(comandoSql, "@FAX_RS", entity_DatoFiscal.FAX_RS);

                AssingParameter(comandoSql, "@TIPO", entity_DatoFiscal.TIPO);

                AssingParameter(comandoSql, "@IDENTIFICADOR", entity_DatoFiscal.IDENTIFICADOR);

                AssingParameter(comandoSql, "@CURP", entity_DatoFiscal.CURP);

                AssingParameter(comandoSql, "@id_asociado", entity_DatoFiscal.id_asociado);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding DatoFiscal " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdDatoFiscal"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a DatoFiscal
        ///</summary>
        /// <param name="">   to delete </param>
        public override int DeleteDatoFiscal(long? Contrato)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatoFiscal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatoFiscalDelete", connection);

                AssingParameter(comandoSql, "@Contrato", Contrato);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting DatoFiscal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a DatoFiscal
        ///</summary>
        /// <param name="DatoFiscal"> Objeto DatoFiscal a editar </param>
        public override int EditDatoFiscal(DatoFiscalEntity entity_DatoFiscal)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatoFiscal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatoFiscalEdit", connection);

                AssingParameter(comandoSql, "@Contrato", entity_DatoFiscal.Contrato);

                AssingParameter(comandoSql, "@IVADESGLOSADO", entity_DatoFiscal.IVADESGLOSADO);

                AssingParameter(comandoSql, "@RAZON_SOCIAL", entity_DatoFiscal.RAZON_SOCIAL);

                AssingParameter(comandoSql, "@RFC", entity_DatoFiscal.RFC);

                AssingParameter(comandoSql, "@CALLE_RS", entity_DatoFiscal.CALLE_RS);

                AssingParameter(comandoSql, "@NUMERO_RS", entity_DatoFiscal.NUMERO_RS);

                AssingParameter(comandoSql, "@ENTRECALLES", entity_DatoFiscal.ENTRECALLES);

                AssingParameter(comandoSql, "@COLONIA_RS", entity_DatoFiscal.COLONIA_RS);

                AssingParameter(comandoSql, "@CIUDAD_RS", entity_DatoFiscal.CIUDAD_RS);

                AssingParameter(comandoSql, "@ESTADO_RS", entity_DatoFiscal.ESTADO_RS);

                AssingParameter(comandoSql, "@CP_RS", entity_DatoFiscal.CP_RS);

                AssingParameter(comandoSql, "@TELEFONO_RS", entity_DatoFiscal.TELEFONO_RS);

                AssingParameter(comandoSql, "@FAX_RS", entity_DatoFiscal.FAX_RS);

                AssingParameter(comandoSql, "@TIPO", entity_DatoFiscal.TIPO);

                AssingParameter(comandoSql, "@IDENTIFICADOR", entity_DatoFiscal.IDENTIFICADOR);

                AssingParameter(comandoSql, "@CURP", entity_DatoFiscal.CURP);

                AssingParameter(comandoSql, "@id_asociado", entity_DatoFiscal.id_asociado);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating DatoFiscal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all DatoFiscal
        ///</summary>
        public override List<DatoFiscalEntity> GetDatoFiscal()
        {
            List<DatoFiscalEntity> DatoFiscalList = new List<DatoFiscalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatoFiscal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatoFiscalGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        DatoFiscalList.Add(GetDatoFiscalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatoFiscal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return DatoFiscalList;
        }

        /// <summary>
        /// Gets all DatoFiscal by List<int>
        ///</summary>
        public override List<DatoFiscalEntity> GetDatoFiscal(List<int> lid)
        {
            List<DatoFiscalEntity> DatoFiscalList = new List<DatoFiscalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatoFiscal.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_DatoFiscalGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        DatoFiscalList.Add(GetDatoFiscalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatoFiscal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return DatoFiscalList;
        }

        /// <summary>
        /// Gets DatoFiscal by
        ///</summary>
        public override DatoFiscalEntity GetDatoFiscalById(long? Contrato)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatoFiscal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatoFiscalGetById", connection);
                DatoFiscalEntity entity_DatoFiscal = null;

                AssingParameter(comandoSql, "@Contrato", Contrato);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_DatoFiscal = GetDatoFiscalFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatoFiscal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_DatoFiscal;
            }

        }



        /// <summary>
        ///Get DatoFiscal
        ///</summary>
        public override SoftvList<DatoFiscalEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<DatoFiscalEntity> entities = new SoftvList<DatoFiscalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatoFiscal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatoFiscalGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetDatoFiscalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatoFiscal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetDatoFiscalCount();
                return entities ?? new SoftvList<DatoFiscalEntity>();
            }
        }

        /// <summary>
        ///Get DatoFiscal
        ///</summary>
        public override SoftvList<DatoFiscalEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<DatoFiscalEntity> entities = new SoftvList<DatoFiscalEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatoFiscal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatoFiscalGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetDatoFiscalFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatoFiscal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetDatoFiscalCount(xml);
                return entities ?? new SoftvList<DatoFiscalEntity>();
            }
        }

        /// <summary>
        ///Get Count DatoFiscal
        ///</summary>
        public int GetDatoFiscalCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatoFiscal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatoFiscalGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatoFiscal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count DatoFiscal
        ///</summary>
        public int GetDatoFiscalCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatoFiscal.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatoFiscalGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatoFiscal " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
