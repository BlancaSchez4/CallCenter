
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.TipoPreguntasData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : TipoPreguntas Data Access Object
    /// File                    : TipoPreguntasDAO.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:15 p. m.
    ///</summary>
    public class TipoPreguntasData : TipoPreguntasProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="TipoPreguntas"> Object TipoPreguntas added to List</param>
        public override int AddTipoPreguntas(TipoPreguntasEntity entity_TipoPreguntas)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasAdd", connection);

                AssingParameter(comandoSql, "@IdTipoPregunta", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@Descripcion", entity_TipoPreguntas.Descripcion);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdTipoPregunta"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a TipoPreguntas
        ///</summary>
        /// <param name="">  IdTipoPregunta to delete </param>
        public override int DeleteTipoPreguntas(int? IdTipoPregunta)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasDelete", connection);

                AssingParameter(comandoSql, "@IdTipoPregunta", IdTipoPregunta);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a TipoPreguntas
        ///</summary>
        /// <param name="TipoPreguntas"> Objeto TipoPreguntas a editar </param>
        public override int EditTipoPreguntas(TipoPreguntasEntity entity_TipoPreguntas)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasEdit", connection);

                AssingParameter(comandoSql, "@IdTipoPregunta", entity_TipoPreguntas.IdTipoPregunta);

                AssingParameter(comandoSql, "@Descripcion", entity_TipoPreguntas.Descripcion);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all TipoPreguntas
        ///</summary>
        public override List<TipoPreguntasEntity> GetTipoPreguntas()
        {
            List<TipoPreguntasEntity> TipoPreguntasList = new List<TipoPreguntasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TipoPreguntasList.Add(GetTipoPreguntasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TipoPreguntasList;
        }

        /// <summary>
        /// Gets all TipoPreguntas by List<int>
        ///</summary>
        public override List<TipoPreguntasEntity> GetTipoPreguntas(List<int> lid)
        {
            List<TipoPreguntasEntity> TipoPreguntasList = new List<TipoPreguntasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TipoPreguntasList.Add(GetTipoPreguntasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TipoPreguntasList;
        }

        /// <summary>
        /// Gets TipoPreguntas by
        ///</summary>
        public override TipoPreguntasEntity GetTipoPreguntasById(int? IdTipoPregunta)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasGetById", connection);
                TipoPreguntasEntity entity_TipoPreguntas = null;


                AssingParameter(comandoSql, "@IdTipoPregunta", IdTipoPregunta);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_TipoPreguntas = GetTipoPreguntasFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_TipoPreguntas;
            }

        }


        public override List<TipoPreguntasEntity> GetTipoPreguntasByIdTipoPregunta(int? IdTipoPregunta)
        {
            List<TipoPreguntasEntity> TipoPreguntasList = new List<TipoPreguntasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasGetByIdTipoPregunta", connection);

                AssingParameter(comandoSql, "@IdTipoPregunta", IdTipoPregunta);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        TipoPreguntasList.Add(GetTipoPreguntasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return TipoPreguntasList;
        }


        /// <summary>
        ///Get TipoPreguntas
        ///</summary>
        public override SoftvList<TipoPreguntasEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<TipoPreguntasEntity> entities = new SoftvList<TipoPreguntasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetTipoPreguntasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetTipoPreguntasCount();
                return entities ?? new SoftvList<TipoPreguntasEntity>();
            }
        }

        /// <summary>
        ///Get TipoPreguntas
        ///</summary>
        public override SoftvList<TipoPreguntasEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<TipoPreguntasEntity> entities = new SoftvList<TipoPreguntasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetTipoPreguntasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetTipoPreguntasCount(xml);
                return entities ?? new SoftvList<TipoPreguntasEntity>();
            }
        }

        /// <summary>
        ///Get Count TipoPreguntas
        ///</summary>
        public int GetTipoPreguntasCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count TipoPreguntas
        ///</summary>
        public int GetTipoPreguntasCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.TipoPreguntas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_TipoPreguntasGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data TipoPreguntas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
