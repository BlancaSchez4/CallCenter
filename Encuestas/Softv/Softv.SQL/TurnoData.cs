
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using Softv.Entities;
    using Softv.Providers;
    using SoftvConfiguration;
    using Globals;

    namespace Softv.DAO
    {
    /// <summary>
    /// Class                   : Softv.DAO.TurnoData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Turno Data Access Object
    /// File                    : TurnoDAO.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:21 p. m.
    ///</summary>
    public class TurnoData : TurnoProvider
    {
    /// <summary>
    ///</summary>
    /// <param name="Turno"> Object Turno added to List</param>
    public override int AddTurno(TurnoEntity entity_Turno)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_TurnoAdd", connection);
    
        AssingParameter(comandoSql, "@IdTurno", null, pd: ParameterDirection.Output, IsKey: true);
      
            AssingParameter(comandoSql,"@Turno",entity_Turno.Turno);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error adding Turno " + ex.Message, ex);
    }
    finally
    {
    connection.Close();
    }
    result = (int)comandoSql.Parameters["@IdTurno"].Value;
    }
    return result;
    }

    /// <summary>
    /// Deletes a Turno
    ///</summary>
    /// <param name="">  IdTurno to delete </param>
    public override int DeleteTurno(int? IdTurno)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_TurnoDelete", connection);
    
            AssingParameter(comandoSql,"@IdTurno",IdTurno);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error deleting Turno " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Edits a Turno
    ///</summary>
    /// <param name="Turno"> Objeto Turno a editar </param>
    public override int EditTurno(TurnoEntity entity_Turno)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_TurnoEdit", connection);
    
            AssingParameter(comandoSql,"@IdTurno",entity_Turno.IdTurno);
          
            AssingParameter(comandoSql,"@Turno",entity_Turno.Turno);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    
        result = int.Parse(ExecuteNonQuery(comandoSql).ToString());
          
    }
    catch (Exception ex)
    {
    throw new Exception("Error updating Turno " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Gets all Turno
    ///</summary>
    public override List<TurnoEntity> GetTurno()
    {
    List<TurnoEntity> TurnoList = new List<TurnoEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_TurnoGet", connection);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    TurnoList.Add(GetTurnoFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Turno "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return TurnoList;
    }

    /// <summary>
    /// Gets all Turno by List<int>
    ///</summary>
    public override List<TurnoEntity> GetTurno(List<int> lid)
    {
    List<TurnoEntity> TurnoList = new List<TurnoEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
    {
    DataTable IdDT = BuildTableID(lid);
    
    SqlCommand comandoSql = CreateCommand("Softv_TurnoGetByIds", connection);
    AssingParameter(comandoSql, "@IdTable", IdDT);
    
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    TurnoList.Add(GetTurnoFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Turno "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return TurnoList;
    }

    /// <summary>
    /// Gets Turno by
    ///</summary>
    public override TurnoEntity GetTurnoById(int? IdTurno)
    {
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_TurnoGetById", connection);
    TurnoEntity entity_Turno = null;

    
            AssingParameter(comandoSql,"@IdTurno", IdTurno);
          
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
    if (rd.Read())
    entity_Turno = GetTurnoFromReader(rd);
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Turno "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    return entity_Turno;
    }

    }

    
          public override List<TurnoEntity> GetTurnoByIdTurno(int? IdTurno)
          {
          List<TurnoEntity> TurnoList = new List<TurnoEntity>();
          using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
          {
          
          SqlCommand comandoSql = CreateCommand("Softv_TurnoGetByIdTurno", connection);
          
          AssingParameter(comandoSql, "@IdTurno", IdTurno);
          IDataReader rd = null;
          try
          {
          if (connection.State == ConnectionState.Closed)
          connection.Open();
          rd = ExecuteReader(comandoSql);

          while (rd.Read())
          {
          TurnoList.Add(GetTurnoFromReader(rd));
          }
          }
          catch (Exception ex)
          {
          throw new Exception("Error getting data Turno "  + ex.Message, ex);
          }
          finally
          {
          if(connection!=null)
          connection.Close();
          if(rd != null)
          rd.Close();
          }
          }
          return TurnoList;
          }
        

    /// <summary>
    ///Get Turno
    ///</summary>
    public override SoftvList<TurnoEntity> GetPagedList(int pageIndex, int pageSize)
    {
    SoftvList<TurnoEntity> entities = new SoftvList<TurnoEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_TurnoGetPaged", connection);
    
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@pageSize", pageSize);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GetTurnoFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Turno " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GetTurnoCount();
    return entities ?? new SoftvList<TurnoEntity>();
    }
    }

    /// <summary>
    ///Get Turno
    ///</summary>
    public override SoftvList<TurnoEntity> GetPagedList(int pageIndex, int pageSize,String xml)
    {
    SoftvList<TurnoEntity> entities = new SoftvList<TurnoEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_TurnoGetPagedXml", connection);
    
    AssingParameter(comandoSql,"@pageSize", pageSize);
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@xml", xml);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GetTurnoFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Turno " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GetTurnoCount(xml);
    return entities ?? new SoftvList<TurnoEntity>();
    }
    }

    /// <summary>
    ///Get Count Turno
    ///</summary>
    public int GetTurnoCount()
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_TurnoGetCount", connection);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Turno " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }


    /// <summary>
    ///Get Count Turno
    ///</summary>
    public int GetTurnoCount(String xml)
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Turno.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_TurnoGetCountXml", connection);
    
    AssingParameter(comandoSql,"@xml", xml);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data Turno " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }

    #region Customs Methods
    
    #endregion
    }
    }
  