
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.RelEncuestaPreguntaResData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : RelEncuestaPreguntaRes Data Access Object
    /// File                    : RelEncuestaPreguntaResDAO.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:38 p. m.
    ///</summary>
    public class RelEncuestaPreguntaResData : RelEncuestaPreguntaResProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="RelEncuestaPreguntaRes"> Object RelEncuestaPreguntaRes added to List</param>
        public override int AddRelEncuestaPreguntaRes(RelEncuestaPreguntaResEntity entity_RelEncuestaPreguntaRes)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResAdd", connection);

                AssingParameter(comandoSql, "@Id", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@IdEncuesta", entity_RelEncuestaPreguntaRes.IdEncuesta);

                AssingParameter(comandoSql, "@IdPregunta", entity_RelEncuestaPreguntaRes.IdPregunta);

                AssingParameter(comandoSql, "@Id_ResOpcMult", entity_RelEncuestaPreguntaRes.Id_ResOpcMult);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@Id"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a RelEncuestaPreguntaRes
        ///</summary>
        /// <param name="">  Id to delete </param>
        public override int DeleteRelEncuestaPreguntaRes(int? Id)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResDelete", connection);

                AssingParameter(comandoSql, "@Id", Id);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a RelEncuestaPreguntaRes
        ///</summary>
        /// <param name="RelEncuestaPreguntaRes"> Objeto RelEncuestaPreguntaRes a editar </param>
        public override int EditRelEncuestaPreguntaRes(RelEncuestaPreguntaResEntity entity_RelEncuestaPreguntaRes)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResEdit", connection);

                AssingParameter(comandoSql, "@Id", entity_RelEncuestaPreguntaRes.Id);

                AssingParameter(comandoSql, "@IdEncuesta", entity_RelEncuestaPreguntaRes.IdEncuesta);

                AssingParameter(comandoSql, "@IdPregunta", entity_RelEncuestaPreguntaRes.IdPregunta);

                AssingParameter(comandoSql, "@Id_ResOpcMult", entity_RelEncuestaPreguntaRes.Id_ResOpcMult);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all RelEncuestaPreguntaRes
        ///</summary>
        public override List<RelEncuestaPreguntaResEntity> GetRelEncuestaPreguntaRes()
        {
            List<RelEncuestaPreguntaResEntity> RelEncuestaPreguntaResList = new List<RelEncuestaPreguntaResEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelEncuestaPreguntaResList.Add(GetRelEncuestaPreguntaResFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelEncuestaPreguntaResList;
        }

        /// <summary>
        /// Gets all RelEncuestaPreguntaRes by List<int>
        ///</summary>
        public override List<RelEncuestaPreguntaResEntity> GetRelEncuestaPreguntaRes(List<int> lid)
        {
            List<RelEncuestaPreguntaResEntity> RelEncuestaPreguntaResList = new List<RelEncuestaPreguntaResEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelEncuestaPreguntaResList.Add(GetRelEncuestaPreguntaResFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelEncuestaPreguntaResList;
        }

        /// <summary>
        /// Gets RelEncuestaPreguntaRes by
        ///</summary>
        public override RelEncuestaPreguntaResEntity GetRelEncuestaPreguntaResById(int? Id)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResGetById", connection);
                RelEncuestaPreguntaResEntity entity_RelEncuestaPreguntaRes = null;


                AssingParameter(comandoSql, "@Id", Id);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_RelEncuestaPreguntaRes = GetRelEncuestaPreguntaResFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_RelEncuestaPreguntaRes;
            }

        }


        public override List<RelEncuestaPreguntaResEntity> GetRelEncuestaPreguntaResByIdEncuesta(int? IdEncuesta)
        {
            List<RelEncuestaPreguntaResEntity> RelEncuestaPreguntaResList = new List<RelEncuestaPreguntaResEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResGetByIdEncuesta", connection);

                AssingParameter(comandoSql, "@IdEncuesta", IdEncuesta);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelEncuestaPreguntaResList.Add(GetRelEncuestaPreguntaResFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelEncuestaPreguntaResList;
        }

        public override List<RelEncuestaPreguntaResEntity> GetRelEncuestaPreguntaResByIdPregunta(int? IdPregunta)
        {
            List<RelEncuestaPreguntaResEntity> RelEncuestaPreguntaResList = new List<RelEncuestaPreguntaResEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResGetByIdPregunta", connection);

                AssingParameter(comandoSql, "@IdPregunta", IdPregunta);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelEncuestaPreguntaResList.Add(GetRelEncuestaPreguntaResFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelEncuestaPreguntaResList;
        }

        public override List<RelEncuestaPreguntaResEntity> GetRelEncuestaPreguntaResById_ResOpcMult(int? Id_ResOpcMult)
        {
            List<RelEncuestaPreguntaResEntity> RelEncuestaPreguntaResList = new List<RelEncuestaPreguntaResEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResGetById_ResOpcMult", connection);

                AssingParameter(comandoSql, "@Id_ResOpcMult", Id_ResOpcMult);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelEncuestaPreguntaResList.Add(GetRelEncuestaPreguntaResFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelEncuestaPreguntaResList;
        }


        /// <summary>
        ///Get RelEncuestaPreguntaRes
        ///</summary>
        public override SoftvList<RelEncuestaPreguntaResEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<RelEncuestaPreguntaResEntity> entities = new SoftvList<RelEncuestaPreguntaResEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetRelEncuestaPreguntaResFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetRelEncuestaPreguntaResCount();
                return entities ?? new SoftvList<RelEncuestaPreguntaResEntity>();
            }
        }

        /// <summary>
        ///Get RelEncuestaPreguntaRes
        ///</summary>
        public override SoftvList<RelEncuestaPreguntaResEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<RelEncuestaPreguntaResEntity> entities = new SoftvList<RelEncuestaPreguntaResEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetRelEncuestaPreguntaResFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetRelEncuestaPreguntaResCount(xml);
                return entities ?? new SoftvList<RelEncuestaPreguntaResEntity>();
            }
        }

        /// <summary>
        ///Get Count RelEncuestaPreguntaRes
        ///</summary>
        public int GetRelEncuestaPreguntaResCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count RelEncuestaPreguntaRes
        ///</summary>
        public int GetRelEncuestaPreguntaResCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelEncuestaPreguntaRes.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelEncuestaPreguntaResGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelEncuestaPreguntaRes " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
