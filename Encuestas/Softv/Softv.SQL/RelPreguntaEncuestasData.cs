
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.RelPreguntaEncuestasData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : RelPreguntaEncuestas Data Access Object
    /// File                    : RelPreguntaEncuestasDAO.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:18 p. m.
    ///</summary>
    public class RelPreguntaEncuestasData : RelPreguntaEncuestasProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="RelPreguntaEncuestas"> Object RelPreguntaEncuestas added to List</param>
        public override int AddRelPreguntaEncuestas(RelPreguntaEncuestasEntity entity_RelPreguntaEncuestas)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasAdd", connection);

                AssingParameter(comandoSql, "@IdPregunta", entity_RelPreguntaEncuestas.IdPregunta);

                AssingParameter(comandoSql, "@IdEncuesta", entity_RelPreguntaEncuestas.IdEncuesta);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdRelPreguntaEncuestas"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a RelPreguntaEncuestas
        ///</summary>
        /// <param name="">   to delete </param>
        public override int DeleteRelPreguntaEncuestas(int? IdPregunta)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasDelete", connection);

                AssingParameter(comandoSql, "@IdPregunta", IdPregunta);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a RelPreguntaEncuestas
        ///</summary>
        /// <param name="RelPreguntaEncuestas"> Objeto RelPreguntaEncuestas a editar </param>
        public override int EditRelPreguntaEncuestas(RelPreguntaEncuestasEntity entity_RelPreguntaEncuestas)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasEdit", connection);

                AssingParameter(comandoSql, "@IdPregunta", entity_RelPreguntaEncuestas.IdPregunta);

                AssingParameter(comandoSql, "@IdEncuesta", entity_RelPreguntaEncuestas.IdEncuesta);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all RelPreguntaEncuestas
        ///</summary>
        public override List<RelPreguntaEncuestasEntity> GetRelPreguntaEncuestas()
        {
            List<RelPreguntaEncuestasEntity> RelPreguntaEncuestasList = new List<RelPreguntaEncuestasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelPreguntaEncuestasList.Add(GetRelPreguntaEncuestasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelPreguntaEncuestasList;
        }

        /// <summary>
        /// Gets all RelPreguntaEncuestas by List<int>
        ///</summary>
        public override List<RelPreguntaEncuestasEntity> GetRelPreguntaEncuestas(List<int> lid)
        {
            List<RelPreguntaEncuestasEntity> RelPreguntaEncuestasList = new List<RelPreguntaEncuestasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelPreguntaEncuestasList.Add(GetRelPreguntaEncuestasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelPreguntaEncuestasList;
        }

        /// <summary>
        /// Gets RelPreguntaEncuestas by
        ///</summary>
        public override RelPreguntaEncuestasEntity GetRelPreguntaEncuestasById(int? IdPregunta)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasGetById", connection);
                RelPreguntaEncuestasEntity entity_RelPreguntaEncuestas = null;

                AssingParameter(comandoSql, "@IdPregunta", IdPregunta);


                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_RelPreguntaEncuestas = GetRelPreguntaEncuestasFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_RelPreguntaEncuestas;
            }

        }


        public override List<RelPreguntaEncuestasEntity> GetRelPreguntaEncuestasByIdPregunta(int? IdPregunta)
        {
            List<RelPreguntaEncuestasEntity> RelPreguntaEncuestasList = new List<RelPreguntaEncuestasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasGetByIdPregunta", connection);

                AssingParameter(comandoSql, "@IdPregunta", IdPregunta);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelPreguntaEncuestasList.Add(GetRelPreguntaEncuestasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelPreguntaEncuestasList;
        }

        public override List<RelPreguntaEncuestasEntity> GetRelPreguntaEncuestasByIdEncuesta(int? IdEncuesta)
        {
            List<RelPreguntaEncuestasEntity> RelPreguntaEncuestasList = new List<RelPreguntaEncuestasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasGetByIdEncuesta", connection);

                AssingParameter(comandoSql, "@IdEncuesta", IdEncuesta);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelPreguntaEncuestasList.Add(GetRelPreguntaEncuestasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelPreguntaEncuestasList;
        }


        /// <summary>
        ///Get RelPreguntaEncuestas
        ///</summary>
        public override SoftvList<RelPreguntaEncuestasEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<RelPreguntaEncuestasEntity> entities = new SoftvList<RelPreguntaEncuestasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetRelPreguntaEncuestasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetRelPreguntaEncuestasCount();
                return entities ?? new SoftvList<RelPreguntaEncuestasEntity>();
            }
        }

        /// <summary>
        ///Get RelPreguntaEncuestas
        ///</summary>
        public override SoftvList<RelPreguntaEncuestasEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<RelPreguntaEncuestasEntity> entities = new SoftvList<RelPreguntaEncuestasEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetRelPreguntaEncuestasFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetRelPreguntaEncuestasCount(xml);
                return entities ?? new SoftvList<RelPreguntaEncuestasEntity>();
            }
        }

        /// <summary>
        ///Get Count RelPreguntaEncuestas
        ///</summary>
        public int GetRelPreguntaEncuestasCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count RelPreguntaEncuestas
        ///</summary>
        public int GetRelPreguntaEncuestasCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaEncuestas.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaEncuestasGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaEncuestas " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
