
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.ResOpcMultsData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : ResOpcMults Data Access Object
    /// File                    : ResOpcMultsDAO.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:17 p. m.
    ///</summary>
    public class ResOpcMultsData : ResOpcMultsProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="ResOpcMults"> Object ResOpcMults added to List</param>
        public override int AddResOpcMults(ResOpcMultsEntity entity_ResOpcMults)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsAdd", connection);

                AssingParameter(comandoSql, "@Id_ResOpcMult", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@ResOpcMult", entity_ResOpcMults.ResOpcMult);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@Id_ResOpcMult"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a ResOpcMults
        ///</summary>
        /// <param name="">  Id_ResOpcMult to delete </param>
        public override int DeleteResOpcMults(int? Id_ResOpcMult)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsDelete", connection);

                AssingParameter(comandoSql, "@Id_ResOpcMult", Id_ResOpcMult);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a ResOpcMults
        ///</summary>
        /// <param name="ResOpcMults"> Objeto ResOpcMults a editar </param>
        public override int EditResOpcMults(ResOpcMultsEntity entity_ResOpcMults)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsEdit", connection);

                AssingParameter(comandoSql, "@Id_ResOpcMult", entity_ResOpcMults.Id_ResOpcMult);

                AssingParameter(comandoSql, "@ResOpcMult", entity_ResOpcMults.ResOpcMult);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all ResOpcMults
        ///</summary>
        public override List<ResOpcMultsEntity> GetResOpcMults()
        {
            List<ResOpcMultsEntity> ResOpcMultsList = new List<ResOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        ResOpcMultsList.Add(GetResOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return ResOpcMultsList;
        }

        /// <summary>
        /// Gets all ResOpcMults by List<int>
        ///</summary>
        public override List<ResOpcMultsEntity> GetResOpcMults(List<int> lid)
        {
            List<ResOpcMultsEntity> ResOpcMultsList = new List<ResOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        ResOpcMultsList.Add(GetResOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return ResOpcMultsList;
        }

        /// <summary>
        /// Gets ResOpcMults by
        ///</summary>
        public override ResOpcMultsEntity GetResOpcMultsById(int? Id_ResOpcMult)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsGetById", connection);
                ResOpcMultsEntity entity_ResOpcMults = null;


                AssingParameter(comandoSql, "@Id_ResOpcMult", Id_ResOpcMult);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_ResOpcMults = GetResOpcMultsFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_ResOpcMults;
            }

        }


        public override List<ResOpcMultsEntity> GetResOpcMultsById_ResOpcMult(int? Id_ResOpcMult)
        {
            List<ResOpcMultsEntity> ResOpcMultsList = new List<ResOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsGetById_ResOpcMult", connection);

                AssingParameter(comandoSql, "@Id_ResOpcMult", Id_ResOpcMult);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        ResOpcMultsList.Add(GetResOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return ResOpcMultsList;
        }



        /// <summary>
        ///Get ResOpcMults
        ///</summary>
        public override SoftvList<ResOpcMultsEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<ResOpcMultsEntity> entities = new SoftvList<ResOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetResOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetResOpcMultsCount();
                return entities ?? new SoftvList<ResOpcMultsEntity>();
            }
        }

        /// <summary>
        ///Get ResOpcMults
        ///</summary>
        public override SoftvList<ResOpcMultsEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<ResOpcMultsEntity> entities = new SoftvList<ResOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetResOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetResOpcMultsCount(xml);
                return entities ?? new SoftvList<ResOpcMultsEntity>();
            }
        }

        /// <summary>
        ///Get Count ResOpcMults
        ///</summary>
        public int GetResOpcMultsCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count ResOpcMults
        ///</summary>
        public int GetResOpcMultsCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ResOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ResOpcMultsGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ResOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
