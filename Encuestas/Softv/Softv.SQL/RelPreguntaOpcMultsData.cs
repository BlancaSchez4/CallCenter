
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.RelPreguntaOpcMultsData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : RelPreguntaOpcMults Data Access Object
    /// File                    : RelPreguntaOpcMultsDAO.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:19 p. m.
    ///</summary>
    public class RelPreguntaOpcMultsData : RelPreguntaOpcMultsProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="RelPreguntaOpcMults"> Object RelPreguntaOpcMults added to List</param>
        public override int AddRelPreguntaOpcMults(RelPreguntaOpcMultsEntity entity_RelPreguntaOpcMults)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsAdd", connection);

                AssingParameter(comandoSql, "@IdPregunta", entity_RelPreguntaOpcMults.IdPregunta);

                AssingParameter(comandoSql, "@Id_ResOpcMult", entity_RelPreguntaOpcMults.Id_ResOpcMult);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdRelPreguntaOpcMults"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a RelPreguntaOpcMults
        ///</summary>
        /// <param name="">   to delete </param>
        public override int DeleteRelPreguntaOpcMults(int? IdPregunta)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsDelete", connection);

                AssingParameter(comandoSql, "@IdPregunta", IdPregunta);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a RelPreguntaOpcMults
        ///</summary>
        /// <param name="RelPreguntaOpcMults"> Objeto RelPreguntaOpcMults a editar </param>
        public override int EditRelPreguntaOpcMults(RelPreguntaOpcMultsEntity entity_RelPreguntaOpcMults)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsEdit", connection);

                AssingParameter(comandoSql, "@IdPregunta", entity_RelPreguntaOpcMults.IdPregunta);

                AssingParameter(comandoSql, "@Id_ResOpcMult", entity_RelPreguntaOpcMults.Id_ResOpcMult);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all RelPreguntaOpcMults
        ///</summary>
        public override List<RelPreguntaOpcMultsEntity> GetRelPreguntaOpcMults()
        {
            List<RelPreguntaOpcMultsEntity> RelPreguntaOpcMultsList = new List<RelPreguntaOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelPreguntaOpcMultsList.Add(GetRelPreguntaOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelPreguntaOpcMultsList;
        }

        /// <summary>
        /// Gets all RelPreguntaOpcMults by List<int>
        ///</summary>
        public override List<RelPreguntaOpcMultsEntity> GetRelPreguntaOpcMults(List<int> lid)
        {
            List<RelPreguntaOpcMultsEntity> RelPreguntaOpcMultsList = new List<RelPreguntaOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelPreguntaOpcMultsList.Add(GetRelPreguntaOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelPreguntaOpcMultsList;
        }

        /// <summary>
        /// Gets RelPreguntaOpcMults by
        ///</summary>
        public override RelPreguntaOpcMultsEntity GetRelPreguntaOpcMultsById(int? IdPregunta)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsGetById", connection);
                RelPreguntaOpcMultsEntity entity_RelPreguntaOpcMults = null;

                AssingParameter(comandoSql, "@IdPregunta", IdPregunta);


                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_RelPreguntaOpcMults = GetRelPreguntaOpcMultsFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_RelPreguntaOpcMults;
            }

        }


        public override List<RelPreguntaOpcMultsEntity> GetRelPreguntaOpcMultsByIdPregunta(int? IdPregunta)
        {
            List<RelPreguntaOpcMultsEntity> RelPreguntaOpcMultsList = new List<RelPreguntaOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsGetByIdPregunta", connection);

                AssingParameter(comandoSql, "@IdPregunta", IdPregunta);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelPreguntaOpcMultsList.Add(GetRelPreguntaOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelPreguntaOpcMultsList;
        }

        public override List<RelPreguntaOpcMultsEntity> GetRelPreguntaOpcMultsById_ResOpcMult(int? Id_ResOpcMult)
        {
            List<RelPreguntaOpcMultsEntity> RelPreguntaOpcMultsList = new List<RelPreguntaOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsGetById_ResOpcMult", connection);

                AssingParameter(comandoSql, "@Id_ResOpcMult", Id_ResOpcMult);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        RelPreguntaOpcMultsList.Add(GetRelPreguntaOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return RelPreguntaOpcMultsList;
        }


        /// <summary>
        ///Get RelPreguntaOpcMults
        ///</summary>
        public override SoftvList<RelPreguntaOpcMultsEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<RelPreguntaOpcMultsEntity> entities = new SoftvList<RelPreguntaOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetRelPreguntaOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetRelPreguntaOpcMultsCount();
                return entities ?? new SoftvList<RelPreguntaOpcMultsEntity>();
            }
        }

        /// <summary>
        ///Get RelPreguntaOpcMults
        ///</summary>
        public override SoftvList<RelPreguntaOpcMultsEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<RelPreguntaOpcMultsEntity> entities = new SoftvList<RelPreguntaOpcMultsEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetRelPreguntaOpcMultsFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetRelPreguntaOpcMultsCount(xml);
                return entities ?? new SoftvList<RelPreguntaOpcMultsEntity>();
            }
        }

        /// <summary>
        ///Get Count RelPreguntaOpcMults
        ///</summary>
        public int GetRelPreguntaOpcMultsCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count RelPreguntaOpcMults
        ///</summary>
        public int GetRelPreguntaOpcMultsCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.RelPreguntaOpcMults.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_RelPreguntaOpcMultsGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data RelPreguntaOpcMults " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
