
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.RelEncuestaPreguntaResController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : RelEncuestaPreguntaResController
    /// File                    : RelEncuestaPreguntaResController.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:38 p. m.
    ///</summary>
    public partial class RelEncuestaPreguntaResController : BaseController, IDisposable
    {
        private SoftvService.RelEncuestaPreguntaResClient proxy = null;

        private SoftvService.EncuestaClient proxyEncuesta = null;

        private SoftvService.PreguntaClient proxyPregunta = null;

        private SoftvService.ResOpcMultsClient proxyResOpcMults = null;

        public RelEncuestaPreguntaResController()
        {


            proxy = new SoftvService.RelEncuestaPreguntaResClient();

            proxyEncuesta = new SoftvService.EncuestaClient();

            proxyPregunta = new SoftvService.PreguntaClient();

            proxyResOpcMults = new SoftvService.ResOpcMultsClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            proxyEncuesta = new SoftvService.EncuestaClient();
            if (proxyEncuesta != null)
            {
                if (proxyEncuesta.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyEncuesta.Close();
                }
            }

            proxyPregunta = new SoftvService.PreguntaClient();
            if (proxyPregunta != null)
            {
                if (proxyPregunta.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyPregunta.Close();
                }
            }

            proxyResOpcMults = new SoftvService.ResOpcMultsClient();
            if (proxyResOpcMults != null)
            {
                if (proxyResOpcMults.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyResOpcMults.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("RelEncuestaPreguntaRes");
            ViewData["Title"] = "RelEncuestaPreguntaRes";
            ViewData["Message"] = "RelEncuestaPreguntaRes";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<RelEncuestaPreguntaResEntity> listResult = proxy.GetRelEncuestaPreguntaResPagedListXml(pageNumber, pSize, SerializeTool.Serialize<RelEncuestaPreguntaResEntity>(new RelEncuestaPreguntaResEntity()));


            List<EncuestaEntity> lstEncuesta = new List<EncuestaEntity>();
            lstEncuesta.Add(new EncuestaEntity() { IdEncuesta = null, TituloEncuesta = "TituloEncuesta" });
            lstEncuesta.AddRange(proxyEncuesta.GetEncuestaList().OrderBy(x => x.TituloEncuesta.Trim()));
            ViewBag.IdEncuestatxt = new SelectList(lstEncuesta, "IdEncuesta", "TituloEncuesta");

            List<PreguntaEntity> lstPregunta = new List<PreguntaEntity>();
            lstPregunta.Add(new PreguntaEntity() { IdPregunta = null, Pregunta = "Todos" });
            lstPregunta.AddRange(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()));
            ViewBag.IdPreguntatxt = new SelectList(lstPregunta, "IdPregunta", "Pregunta");

            List<ResOpcMultsEntity> lstResOpcMults = new List<ResOpcMultsEntity>();
            lstResOpcMults.Add(new ResOpcMultsEntity() { Id_ResOpcMult = null, ResOpcMult = "ResOpcMult" });
            lstResOpcMults.AddRange(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()));
            ViewBag.Id_ResOpcMulttxt = new SelectList(lstResOpcMults, "Id_ResOpcMult", "ResOpcMult");

            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("RelEncuestaPreguntaRes");
            return View(new StaticPagedList<RelEncuestaPreguntaResEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            RelEncuestaPreguntaResEntity objRelEncuestaPreguntaRes = proxy.GetRelEncuestaPreguntaRes(id);
            if (objRelEncuestaPreguntaRes == null)
            {
                return HttpNotFound();
            }
            return PartialView(objRelEncuestaPreguntaRes);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("RelEncuestaPreguntaRes");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            ViewBag.VBEncuesta = new SelectList(proxyEncuesta.GetEncuestaList().OrderBy(x => x.TituloEncuesta.Trim()).ToList(), "IdEncuesta", "TituloEncuesta");

            ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta");

            ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult");

            return View();
        }

        [HttpPost]
        public ActionResult Create(RelEncuestaPreguntaResEntity objRelEncuestaPreguntaRes)
        {
            if (ModelState.IsValid)
            {

                objRelEncuestaPreguntaRes.BaseRemoteIp = RemoteIp;
                objRelEncuestaPreguntaRes.BaseIdUser = LoggedUserName;
                int result = proxy.AddRelEncuestaPreguntaRes(objRelEncuestaPreguntaRes);
                if (result == -1)
                {

                    ViewBag.VBEncuesta = new SelectList(proxyEncuesta.GetEncuestaList().OrderBy(x => x.TituloEncuesta.Trim()).ToList(), "IdEncuesta", "TituloEncuesta", objRelEncuestaPreguntaRes.IdEncuesta);

                    ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta", objRelEncuestaPreguntaRes.IdPregunta);

                    ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult", objRelEncuestaPreguntaRes.Id_ResOpcMult);

                    AssingMessageScript("El RelEncuestaPreguntaRes ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objRelEncuestaPreguntaRes);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el RelEncuestaPreguntaRes en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objRelEncuestaPreguntaRes);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("RelEncuestaPreguntaRes");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            RelEncuestaPreguntaResEntity objRelEncuestaPreguntaRes = proxy.GetRelEncuestaPreguntaRes(id);

            ViewBag.VBEncuesta = new SelectList(proxyEncuesta.GetEncuestaList().OrderBy(x => x.TituloEncuesta.Trim()).ToList(), "IdEncuesta", "TituloEncuesta");

            ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta");

            ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult");

            if (objRelEncuestaPreguntaRes == null)
            {
                return HttpNotFound();
            }
            return View(objRelEncuestaPreguntaRes);
        }

        //
        // POST: /RelEncuestaPreguntaRes/Edit/5
        [HttpPost]
        public ActionResult Edit(RelEncuestaPreguntaResEntity objRelEncuestaPreguntaRes)
        {
            if (ModelState.IsValid)
            {
                objRelEncuestaPreguntaRes.BaseRemoteIp = RemoteIp;
                objRelEncuestaPreguntaRes.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateRelEncuestaPreguntaRes(objRelEncuestaPreguntaRes);
                if (result == -1)
                {
                    RelEncuestaPreguntaResEntity objRelEncuestaPreguntaResOld = proxy.GetRelEncuestaPreguntaRes(objRelEncuestaPreguntaRes.Id);

                    ViewBag.VBEncuesta = new SelectList(proxyEncuesta.GetEncuestaList().Where(x => x.IdEncuesta == objRelEncuestaPreguntaResOld.IdEncuesta).OrderBy(x => x.TituloEncuesta.Trim()).ToList(), "IdEncuesta", "TituloEncuesta", objRelEncuestaPreguntaRes.IdEncuesta);

                    ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().Where(x => x.IdPregunta == objRelEncuestaPreguntaResOld.IdPregunta).OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta", objRelEncuestaPreguntaRes.IdPregunta);

                    ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().Where(x => x.Id_ResOpcMult == objRelEncuestaPreguntaResOld.Id_ResOpcMult).OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult", objRelEncuestaPreguntaRes.Id_ResOpcMult);

                    AssingMessageScript("El RelEncuestaPreguntaRes ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objRelEncuestaPreguntaRes);
                }
                if (result > 0)
                {
                    AssingMessageScript("El RelEncuestaPreguntaRes se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objRelEncuestaPreguntaRes);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, int? Id, int? IdEncuesta, int? IdPregunta, int? Id_ResOpcMult)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<RelEncuestaPreguntaResEntity> listResult = null;
            List<RelEncuestaPreguntaResEntity> listRelEncuestaPreguntaRes = new List<RelEncuestaPreguntaResEntity>();
            RelEncuestaPreguntaResEntity objRelEncuestaPreguntaRes = new RelEncuestaPreguntaResEntity();
            RelEncuestaPreguntaResEntity objGetRelEncuestaPreguntaRes = new RelEncuestaPreguntaResEntity();


            if ((Id != null))
            {
                objRelEncuestaPreguntaRes.Id = Id;
            }

            if ((IdEncuesta != null))
            {
                objRelEncuestaPreguntaRes.IdEncuesta = IdEncuesta;
            }

            if ((IdPregunta != null))
            {
                objRelEncuestaPreguntaRes.IdPregunta = IdPregunta;
            }

            if ((Id_ResOpcMult != null))
            {
                objRelEncuestaPreguntaRes.Id_ResOpcMult = Id_ResOpcMult;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetRelEncuestaPreguntaResPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRelEncuestaPreguntaRes));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetRelEncuestaPreguntaResPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRelEncuestaPreguntaRes));
            }
            listResult.ToList().ForEach(x => listRelEncuestaPreguntaRes.Add(x));

            var RelEncuestaPreguntaResAsIPagedList = new StaticPagedList<RelEncuestaPreguntaResEntity>(listRelEncuestaPreguntaRes, pageNumber, pSize, listResult.totalCount);
            if (RelEncuestaPreguntaResAsIPagedList.Count > 0)
            {
                return PartialView(RelEncuestaPreguntaResAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteRelEncuestaPreguntaRes(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de RelEncuestaPreguntaRes Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de RelEncuestaPreguntaRes No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

