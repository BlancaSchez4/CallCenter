
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.RelPreguntaOpcMultsController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : RelPreguntaOpcMultsController
    /// File                    : RelPreguntaOpcMultsController.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:19 p. m.
    ///</summary>
    public partial class RelPreguntaOpcMultsController : BaseController, IDisposable
    {
        private SoftvService.RelPreguntaOpcMultsClient proxy = null;

        private SoftvService.PreguntaClient proxyPregunta = null;

        private SoftvService.ResOpcMultsClient proxyResOpcMults = null;

        public RelPreguntaOpcMultsController()
        {


            proxy = new SoftvService.RelPreguntaOpcMultsClient();

            proxyPregunta = new SoftvService.PreguntaClient();

            proxyResOpcMults = new SoftvService.ResOpcMultsClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            proxyPregunta = new SoftvService.PreguntaClient();
            if (proxyPregunta != null)
            {
                if (proxyPregunta.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyPregunta.Close();
                }
            }

            proxyResOpcMults = new SoftvService.ResOpcMultsClient();
            if (proxyResOpcMults != null)
            {
                if (proxyResOpcMults.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyResOpcMults.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("RelPreguntaOpcMults");
            ViewData["Title"] = "RelPreguntaOpcMults";
            ViewData["Message"] = "RelPreguntaOpcMults";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<RelPreguntaOpcMultsEntity> listResult = proxy.GetRelPreguntaOpcMultsPagedListXml(pageNumber, pSize, SerializeTool.Serialize<RelPreguntaOpcMultsEntity>(new RelPreguntaOpcMultsEntity()));


            List<PreguntaEntity> lstPregunta = new List<PreguntaEntity>();
            lstPregunta.Add(new PreguntaEntity() { IdPregunta = null, Pregunta = "Todos" });
            lstPregunta.AddRange(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()));
            ViewBag.IdPreguntatxt = new SelectList(lstPregunta, "IdPregunta", "Pregunta");

            List<ResOpcMultsEntity> lstResOpcMults = new List<ResOpcMultsEntity>();
            lstResOpcMults.Add(new ResOpcMultsEntity() { Id_ResOpcMult = null, ResOpcMult = "Todos" });
            lstResOpcMults.AddRange(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()));
            ViewBag.Id_ResOpcMulttxt = new SelectList(lstResOpcMults, "Id_ResOpcMult", "ResOpcMult");

            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("RelPreguntaOpcMults");
            return View(new StaticPagedList<RelPreguntaOpcMultsEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            RelPreguntaOpcMultsEntity objRelPreguntaOpcMults = proxy.GetRelPreguntaOpcMults(id);
            if (objRelPreguntaOpcMults == null)
            {
                return HttpNotFound();
            }
            return PartialView(objRelPreguntaOpcMults);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("RelPreguntaOpcMults");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta");

            ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult");

            return View();
        }

        [HttpPost]
        public ActionResult Create(RelPreguntaOpcMultsEntity objRelPreguntaOpcMults)
        {
            if (ModelState.IsValid)
            {

                objRelPreguntaOpcMults.BaseRemoteIp = RemoteIp;
                objRelPreguntaOpcMults.BaseIdUser = LoggedUserName;
                int result = proxy.AddRelPreguntaOpcMults(objRelPreguntaOpcMults);
                if (result == -1)
                {

                    ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta", objRelPreguntaOpcMults.IdPregunta);

                    ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult", objRelPreguntaOpcMults.Id_ResOpcMult);

                    AssingMessageScript("El RelPreguntaOpcMults ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objRelPreguntaOpcMults);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el RelPreguntaOpcMults en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objRelPreguntaOpcMults);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("RelPreguntaOpcMults");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            RelPreguntaOpcMultsEntity objRelPreguntaOpcMults = proxy.GetRelPreguntaOpcMults(id);

            ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta");

            ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult");

            if (objRelPreguntaOpcMults == null)
            {
                return HttpNotFound();
            }
            return View(objRelPreguntaOpcMults);
        }

        //
        // POST: /RelPreguntaOpcMults/Edit/5
        [HttpPost]
        public ActionResult Edit(RelPreguntaOpcMultsEntity objRelPreguntaOpcMults)
        {
            if (ModelState.IsValid)
            {
                objRelPreguntaOpcMults.BaseRemoteIp = RemoteIp;
                objRelPreguntaOpcMults.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateRelPreguntaOpcMults(objRelPreguntaOpcMults);
                if (result == -1)
                {
                    RelPreguntaOpcMultsEntity objRelPreguntaOpcMultsOld = proxy.GetRelPreguntaOpcMults(objRelPreguntaOpcMults.IdPregunta);

                    ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().Where(x => x.IdPregunta == objRelPreguntaOpcMultsOld.IdPregunta).OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta", objRelPreguntaOpcMults.IdPregunta);

                    ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().Where(x => x.Id_ResOpcMult == objRelPreguntaOpcMultsOld.Id_ResOpcMult).OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult", objRelPreguntaOpcMults.Id_ResOpcMult);

                    AssingMessageScript("El RelPreguntaOpcMults ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objRelPreguntaOpcMults);
                }
                if (result > 0)
                {
                    AssingMessageScript("El RelPreguntaOpcMults se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objRelPreguntaOpcMults);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, int? IdPregunta, int? Id_ResOpcMult)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<RelPreguntaOpcMultsEntity> listResult = null;
            List<RelPreguntaOpcMultsEntity> listRelPreguntaOpcMults = new List<RelPreguntaOpcMultsEntity>();
            RelPreguntaOpcMultsEntity objRelPreguntaOpcMults = new RelPreguntaOpcMultsEntity();
            RelPreguntaOpcMultsEntity objGetRelPreguntaOpcMults = new RelPreguntaOpcMultsEntity();


            if ((IdPregunta != null))
            {
                objRelPreguntaOpcMults.IdPregunta = IdPregunta;
            }

            if ((Id_ResOpcMult != null))
            {
                objRelPreguntaOpcMults.Id_ResOpcMult = Id_ResOpcMult;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetRelPreguntaOpcMultsPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRelPreguntaOpcMults));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetRelPreguntaOpcMultsPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRelPreguntaOpcMults));
            }
            listResult.ToList().ForEach(x => listRelPreguntaOpcMults.Add(x));

            var RelPreguntaOpcMultsAsIPagedList = new StaticPagedList<RelPreguntaOpcMultsEntity>(listRelPreguntaOpcMults, pageNumber, pSize, listResult.totalCount);
            if (RelPreguntaOpcMultsAsIPagedList.Count > 0)
            {
                return PartialView(RelPreguntaOpcMultsAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteRelPreguntaOpcMults(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de RelPreguntaOpcMults Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de RelPreguntaOpcMults No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

