
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.CVECAROLController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : CVECAROLController
    /// File                    : CVECAROLController.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:39 p. m.
    ///</summary>
    public partial class CVECAROLController : BaseController, IDisposable
    {
        private SoftvService.CVECAROLClient proxy = null;

        public CVECAROLController()
        {

            proxy = new SoftvService.CVECAROLClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("CVECAROL");
            ViewData["Title"] = "CVECAROL";
            ViewData["Message"] = "CVECAROL";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<CVECAROLEntity> listResult = proxy.GetCVECAROLPagedListXml(pageNumber, pSize, SerializeTool.Serialize<CVECAROLEntity>(new CVECAROLEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("CVECAROL");
            return View(new StaticPagedList<CVECAROLEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            CVECAROLEntity objCVECAROL = proxy.GetCVECAROL(id);
            if (objCVECAROL == null)
            {
                return HttpNotFound();
            }
            return PartialView(objCVECAROL);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("CVECAROL");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(CVECAROLEntity objCVECAROL)
        {
            if (ModelState.IsValid)
            {

                objCVECAROL.BaseRemoteIp = RemoteIp;
                objCVECAROL.BaseIdUser = LoggedUserName;
                int result = proxy.AddCVECAROL(objCVECAROL);
                if (result == -1)
                {

                    AssingMessageScript("El CVECAROL ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objCVECAROL);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el CVECAROL en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objCVECAROL);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("CVECAROL");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            CVECAROLEntity objCVECAROL = proxy.GetCVECAROL(id);

            if (objCVECAROL == null)
            {
                return HttpNotFound();
            }
            return View(objCVECAROL);
        }

        //
        // POST: /CVECAROL/Edit/5
        [HttpPost]
        public ActionResult Edit(CVECAROLEntity objCVECAROL)
        {
            if (ModelState.IsValid)
            {
                objCVECAROL.BaseRemoteIp = RemoteIp;
                objCVECAROL.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateCVECAROL(objCVECAROL);
                if (result == -1)
                {
                    CVECAROLEntity objCVECAROLOld = proxy.GetCVECAROL(objCVECAROL.Clv_Colonia);

                    AssingMessageScript("El CVECAROL ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objCVECAROL);
                }
                if (result > 0)
                {
                    AssingMessageScript("El CVECAROL se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objCVECAROL);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, int? Clv_Colonia)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<CVECAROLEntity> listResult = null;
            List<CVECAROLEntity> listCVECAROL = new List<CVECAROLEntity>();
            CVECAROLEntity objCVECAROL = new CVECAROLEntity();
            CVECAROLEntity objGetCVECAROL = new CVECAROLEntity();


            if ((Clv_Colonia != null))
            {
                objCVECAROL.Clv_Colonia = Clv_Colonia;
            }



            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetCVECAROLPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCVECAROL));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetCVECAROLPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCVECAROL));
            }
            listResult.ToList().ForEach(x => listCVECAROL.Add(x));

            var CVECAROLAsIPagedList = new StaticPagedList<CVECAROLEntity>(listCVECAROL, pageNumber, pSize, listResult.totalCount);
            if (CVECAROLAsIPagedList.Count > 0)
            {
                return PartialView(CVECAROLAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteCVECAROL(id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de CVECAROL Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de CVECAROL No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

