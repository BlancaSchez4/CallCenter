
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.TipServController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : TipServController
    /// File                    : TipServController.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 06:40 p. m.
    ///</summary>
    public partial class TipServController : BaseController, IDisposable
    {
        private SoftvService.TipServClient proxy = null;

        public TipServController()
        {


            proxy = new SoftvService.TipServClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("TipServ");
            ViewData["Title"] = "TipServ";
            ViewData["Message"] = "TipServ";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<TipServEntity> listResult = proxy.GetTipServPagedListXml(pageNumber, pSize, SerializeTool.Serialize<TipServEntity>(new TipServEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("TipServ");
            return View(new StaticPagedList<TipServEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            TipServEntity objTipServ = proxy.GetTipServ(id);
            if (objTipServ == null)
            {
                return HttpNotFound();
            }
            return PartialView(objTipServ);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("TipServ");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(TipServEntity objTipServ)
        {
            if (ModelState.IsValid)
            {

                objTipServ.BaseRemoteIp = RemoteIp;
                objTipServ.BaseIdUser = LoggedUserName;
                int result = proxy.AddTipServ(objTipServ);
                if (result == -1)
                {

                    AssingMessageScript("El TipServ ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objTipServ);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el TipServ en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objTipServ);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("TipServ");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            TipServEntity objTipServ = proxy.GetTipServ(id);

            if (objTipServ == null)
            {
                return HttpNotFound();
            }
            return View(objTipServ);
        }

        //
        // POST: /TipServ/Edit/5
        [HttpPost]
        public ActionResult Edit(TipServEntity objTipServ)
        {
            if (ModelState.IsValid)
            {
                objTipServ.BaseRemoteIp = RemoteIp;
                objTipServ.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateTipServ(objTipServ);
                if (result == -1)
                {
                    TipServEntity objTipServOld = proxy.GetTipServ(objTipServ.Clv_TipSer);

                    AssingMessageScript("El TipServ ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objTipServ);
                }
                if (result > 0)
                {
                    AssingMessageScript("El TipServ se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objTipServ);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Concepto, short? Habilitar)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<TipServEntity> listResult = null;
            List<TipServEntity> listTipServ = new List<TipServEntity>();
            TipServEntity objTipServ = new TipServEntity();
            TipServEntity objGetTipServ = new TipServEntity();


            if ((Concepto != null && Concepto.ToString() != ""))
            {
                objTipServ.Concepto = Concepto;
            }

            if ((Habilitar != null))
            {
                objTipServ.Habilitar = Habilitar;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetTipServPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTipServ));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetTipServPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTipServ));
            }
            listResult.ToList().ForEach(x => listTipServ.Add(x));

            var TipServAsIPagedList = new StaticPagedList<TipServEntity>(listTipServ, pageNumber, pSize, listResult.totalCount);
            if (TipServAsIPagedList.Count > 0)
            {
                return PartialView(TipServAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteTipServ(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de TipServ Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de TipServ No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

