
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.ConexionController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : ConexionController
    /// File                    : ConexionController.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:21 p. m.
    ///</summary>
    public partial class ConexionController : BaseController, IDisposable
    {
        private SoftvService.ConexionClient proxy = null;

        public ConexionController()
        {

            proxy = new SoftvService.ConexionClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }


        public ActionResult AddConexion(ConexionEntity conexion)
        {
            int result = proxy.AddConexion(conexion);
            return Json(result, JsonRequestBehavior.AllowGet);
        }







        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("Conexion");
            ViewData["Title"] = "Conexion";
            ViewData["Message"] = "Conexion";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<ConexionEntity> listResult = proxy.GetConexionPagedListXml(pageNumber, pSize, SerializeTool.Serialize<ConexionEntity>(new ConexionEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("Conexion");
            return View(new StaticPagedList<ConexionEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            ConexionEntity objConexion = proxy.GetConexion(id);
            if (objConexion == null)
            {
                return HttpNotFound();
            }
            return PartialView(objConexion);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("Conexion");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(ConexionEntity objConexion)
        {
            if (ModelState.IsValid)
            {

                objConexion.BaseRemoteIp = RemoteIp;
                objConexion.BaseIdUser = LoggedUserName;
                int result = proxy.AddConexion(objConexion);
                if (result == -1)
                {

                    AssingMessageScript("El Conexion ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objConexion);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Conexion en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objConexion);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Conexion");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            ConexionEntity objConexion = proxy.GetConexion(id);

            if (objConexion == null)
            {
                return HttpNotFound();
            }
            return View(objConexion);
        }

        //
        // POST: /Conexion/Edit/5
        [HttpPost]
        public ActionResult Edit(ConexionEntity objConexion)
        {
            if (ModelState.IsValid)
            {
                objConexion.BaseRemoteIp = RemoteIp;
                objConexion.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateConexion(objConexion);
                if (result == -1)
                {
                    ConexionEntity objConexionOld = proxy.GetConexion(objConexion.IdConexion);

                    AssingMessageScript("El Conexion ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objConexion);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Conexion se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objConexion);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Plaza, String Servidor, String BaseDeDatos, String Usuario, String Password)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<ConexionEntity> listResult = null;
            List<ConexionEntity> listConexion = new List<ConexionEntity>();
            ConexionEntity objConexion = new ConexionEntity();
            ConexionEntity objGetConexion = new ConexionEntity();


            if ((Plaza != null && Plaza.ToString() != ""))
            {
                objConexion.Plaza = Plaza;
            }

            if ((Servidor != null && Servidor.ToString() != ""))
            {
                objConexion.Servidor = Servidor;
            }

            if ((BaseDeDatos != null && BaseDeDatos.ToString() != ""))
            {
                objConexion.BaseDeDatos = BaseDeDatos;
            }

            if ((Usuario != null && Usuario.ToString() != ""))
            {
                objConexion.Usuario = Usuario;
            }

            if ((Password != null && Password.ToString() != ""))
            {
                objConexion.Password = Password;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetConexionPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objConexion));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetConexionPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objConexion));
            }
            listResult.ToList().ForEach(x => listConexion.Add(x));

            var ConexionAsIPagedList = new StaticPagedList<ConexionEntity>(listConexion, pageNumber, pSize, listResult.totalCount);
            if (ConexionAsIPagedList.Count > 0)
            {
                return PartialView(ConexionAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteConexion(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de Conexion Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de Conexion No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }

        //Nuevas funciones 

        public ActionResult GetList(string data, int draw, int start, int length)
        {

            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordsFiltered = 0;
            dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length);
            dataTableData.recordsFiltered = recordsFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }

        private List<ConexionEntity> FiltrarContenido(ref int recordFiltered, int start, int length)
        {

            List<ConexionEntity> lista = proxy.GetConexionList();
            recordFiltered = lista.Count;
            int rango = start + length;
            return lista.Skip(start).Take(length).ToList();
        }


        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<ConexionEntity> data { get; set; }
        }

    }

}

