
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;

using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.Cliente_ApellidoController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : Cliente_ApellidoController
    /// File                    : Cliente_ApellidoController.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:30 p. m.
    ///</summary>
    public partial class Cliente_ApellidoController : BaseController, IDisposable
    {
        private SoftvService.Cliente_ApellidoClient proxy = null;

        public Cliente_ApellidoController()
        {


            proxy = new SoftvService.Cliente_ApellidoClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("Cliente_Apellido");
            ViewData["Title"] = "Cliente_Apellido";
            ViewData["Message"] = "Cliente_Apellido";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<Cliente_ApellidoEntity> listResult = proxy.GetCliente_ApellidoPagedListXml(pageNumber, pSize, SerializeTool.Serialize<Cliente_ApellidoEntity>(new Cliente_ApellidoEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("Cliente_Apellido");
            return View(new StaticPagedList<Cliente_ApellidoEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            Cliente_ApellidoEntity objCliente_Apellido = proxy.GetCliente_Apellido(id);
            if (objCliente_Apellido == null)
            {
                return HttpNotFound();
            }
            return PartialView(objCliente_Apellido);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("Cliente_Apellido");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(Cliente_ApellidoEntity objCliente_Apellido)
        {
            if (ModelState.IsValid)
            {

                objCliente_Apellido.BaseRemoteIp = RemoteIp;
                objCliente_Apellido.BaseIdUser = LoggedUserName;
                int result = proxy.AddCliente_Apellido(objCliente_Apellido);
                if (result == -1)
                {

                    AssingMessageScript("El Cliente_Apellido ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objCliente_Apellido);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Cliente_Apellido en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objCliente_Apellido);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Cliente_Apellido");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            Cliente_ApellidoEntity objCliente_Apellido = proxy.GetCliente_Apellido(id);

            if (objCliente_Apellido == null)
            {
                return HttpNotFound();
            }
            return View(objCliente_Apellido);
        }

        //
        // POST: /Cliente_Apellido/Edit/5
        [HttpPost]
        public ActionResult Edit(Cliente_ApellidoEntity objCliente_Apellido)
        {
            if (ModelState.IsValid)
            {
                objCliente_Apellido.BaseRemoteIp = RemoteIp;
                objCliente_Apellido.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateCliente_Apellido(objCliente_Apellido);
                if (result == -1)
                {
                    Cliente_ApellidoEntity objCliente_ApellidoOld = proxy.GetCliente_Apellido(objCliente_Apellido.Contrato);

                    AssingMessageScript("El Cliente_Apellido ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objCliente_Apellido);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Cliente_Apellido se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objCliente_Apellido);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Nombre, String SegundoNombre, String Apellido_Paterno, String Apellido_Materno, DateTime? FechaNacimiento, String RFC, bool? EsFisica)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<Cliente_ApellidoEntity> listResult = null;
            List<Cliente_ApellidoEntity> listCliente_Apellido = new List<Cliente_ApellidoEntity>();
            Cliente_ApellidoEntity objCliente_Apellido = new Cliente_ApellidoEntity();
            Cliente_ApellidoEntity objGetCliente_Apellido = new Cliente_ApellidoEntity();


            if ((Nombre != null && Nombre.ToString() != ""))
            {
                objCliente_Apellido.Nombre = Nombre;
            }

            if ((SegundoNombre != null && SegundoNombre.ToString() != ""))
            {
                objCliente_Apellido.SegundoNombre = SegundoNombre;
            }

            if ((Apellido_Paterno != null && Apellido_Paterno.ToString() != ""))
            {
                objCliente_Apellido.Apellido_Paterno = Apellido_Paterno;
            }

            if ((Apellido_Materno != null && Apellido_Materno.ToString() != ""))
            {
                objCliente_Apellido.Apellido_Materno = Apellido_Materno;
            }

            if ((FechaNacimiento != null))
            {
                objCliente_Apellido.FechaNacimiento = FechaNacimiento;
            }

            if ((RFC != null && RFC.ToString() != ""))
            {
                objCliente_Apellido.RFC = RFC;
            }

            if ((EsFisica != null))
            {
                objCliente_Apellido.EsFisica = EsFisica;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetCliente_ApellidoPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCliente_Apellido));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetCliente_ApellidoPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCliente_Apellido));
            }
            listResult.ToList().ForEach(x => listCliente_Apellido.Add(x));

            var Cliente_ApellidoAsIPagedList = new StaticPagedList<Cliente_ApellidoEntity>(listCliente_Apellido, pageNumber, pSize, listResult.totalCount);
            if (Cliente_ApellidoAsIPagedList.Count > 0)
            {
                return PartialView(Cliente_ApellidoAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteCliente_Apellido(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de Cliente_Apellido Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de Cliente_Apellido No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

