
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.RelEncuestaClientesController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : RelEncuestaClientesController
    /// File                    : RelEncuestaClientesController.cs
    /// Creation date           : 02/05/2016
    /// Creation time           : 06:39 p. m.
    ///</summary>
    public partial class RelEncuestaClientesController : BaseController, IDisposable
    {
        private SoftvService.RelEncuestaClientesClient proxy = null;

        private SoftvService.EncuestaClient proxyEncuesta = null;

        private SoftvService.CLIENTEClient proxyCLIENTE = null;

        public RelEncuestaClientesController()
        {

            proxy = new SoftvService.RelEncuestaClientesClient();

            proxyEncuesta = new SoftvService.EncuestaClient();

            proxyCLIENTE = new SoftvService.CLIENTEClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            proxyEncuesta = new SoftvService.EncuestaClient();
            if (proxyEncuesta != null)
            {
                if (proxyEncuesta.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyEncuesta.Close();
                }
            }

            proxyCLIENTE = new SoftvService.CLIENTEClient();
            if (proxyCLIENTE != null)
            {
                if (proxyCLIENTE.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyCLIENTE.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("RelEncuestaClientes");
            ViewData["Title"] = "RelEncuestaClientes";
            ViewData["Message"] = "RelEncuestaClientes";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<RelEncuestaClientesEntity> listResult = proxy.GetRelEncuestaClientesPagedListXml(pageNumber, pSize, SerializeTool.Serialize<RelEncuestaClientesEntity>(new RelEncuestaClientesEntity()));


            List<EncuestaEntity> lstEncuesta = new List<EncuestaEntity>();
            lstEncuesta.Add(new EncuestaEntity() { IdEncuesta = null, TituloEncuesta = "Todos" });
            //lstEncuesta.AddRange(proxyEncuesta.GetEncuestaList().OrderBy(x => x.TituloEncuesta.Trim()));



            ViewBag.IdEncuestatxt = new SelectList(lstEncuesta, "IdEncuesta", "TituloEncuesta");

            List<CLIENTEEntity> lstCLIENTE = new List<CLIENTEEntity>();
            lstCLIENTE.Add(new CLIENTEEntity() { CONTRATO = null, NOMBRE = "Todos" });
            lstCLIENTE.AddRange(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()));
            ViewBag.CONTRATOtxt = new SelectList(lstCLIENTE, "Contrato", "CONTRATO");

            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("RelEncuestaClientes");
            return View(new StaticPagedList<RelEncuestaClientesEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            RelEncuestaClientesEntity objRelEncuestaClientes = proxy.GetRelEncuestaClientes(id);
            if (objRelEncuestaClientes == null)
            {
                return HttpNotFound();
            }
            return PartialView(objRelEncuestaClientes);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("RelEncuestaClientes");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            ViewBag.VBEncuesta = new SelectList(proxyEncuesta.GetEncuestaList().OrderBy(x => x.TituloEncuesta.Trim()).ToList(), "IdEncuesta", "TituloEncuesta");

            ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()).ToList(), "CONTRATO", "NOMBRE");

            return View();
        }

        [HttpPost]
        public ActionResult Create(RelEncuestaClientesEntity objRelEncuestaClientes)
        {
            if (ModelState.IsValid)
            {

                objRelEncuestaClientes.BaseRemoteIp = RemoteIp;
                objRelEncuestaClientes.BaseIdUser = LoggedUserName;
                int result = proxy.AddRelEncuestaClientes(objRelEncuestaClientes);
                if (result == -1)
                {

                    ViewBag.VBEncuesta = new SelectList(proxyEncuesta.GetEncuestaList().OrderBy(x => x.TituloEncuesta.Trim()).ToList(), "IdEncuesta", "TituloEncuesta", objRelEncuestaClientes.IdEncuesta);

                    ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()).ToList(), "CONTRATO", "NOMBRE", objRelEncuestaClientes.Contrato);

                    AssingMessageScript("El RelEncuestaClientes ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objRelEncuestaClientes);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el RelEncuestaClientes en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objRelEncuestaClientes);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("RelEncuestaClientes");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            RelEncuestaClientesEntity objRelEncuestaClientes = proxy.GetRelEncuestaClientes(id);

            ViewBag.VBEncuesta = new SelectList(proxyEncuesta.GetEncuestaList().OrderBy(x => x.TituloEncuesta.Trim()).ToList(), "IdEncuesta", "TituloEncuesta");

            ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()).ToList(), "CONTRATO", "NOMBRE");

            if (objRelEncuestaClientes == null)
            {
                return HttpNotFound();
            }
            return View(objRelEncuestaClientes);
        }

        //
        // POST: /RelEncuestaClientes/Edit/5
        [HttpPost]
        public ActionResult Edit(RelEncuestaClientesEntity objRelEncuestaClientes)
        {
            if (ModelState.IsValid)
            {
                objRelEncuestaClientes.BaseRemoteIp = RemoteIp;
                objRelEncuestaClientes.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateRelEncuestaClientes(objRelEncuestaClientes);
                if (result == -1)
                {
                    RelEncuestaClientesEntity objRelEncuestaClientesOld = proxy.GetRelEncuestaClientes(objRelEncuestaClientes.IdProceso);

                    ViewBag.VBEncuesta = new SelectList(proxyEncuesta.GetEncuestaList().Where(x => x.IdEncuesta == objRelEncuestaClientesOld.IdEncuesta).OrderBy(x => x.TituloEncuesta.Trim()).ToList(), "IdEncuesta", "TituloEncuesta", objRelEncuestaClientes.IdEncuesta);

                    ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().Where(x => x.CONTRATO == objRelEncuestaClientesOld.Contrato).OrderBy(x => x.NOMBRE.Trim()).ToList(), "CONTRATO", "NOMBRE", objRelEncuestaClientes.Contrato);

                    AssingMessageScript("El RelEncuestaClientes ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objRelEncuestaClientes);
                }
                if (result > 0)
                {
                    AssingMessageScript("El RelEncuestaClientes se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objRelEncuestaClientes);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, DateTime? FechaApli, int? IdEncuesta, int? Contrato)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<RelEncuestaClientesEntity> listResult = null;
            List<RelEncuestaClientesEntity> listRelEncuestaClientes = new List<RelEncuestaClientesEntity>();
            RelEncuestaClientesEntity objRelEncuestaClientes = new RelEncuestaClientesEntity();
            RelEncuestaClientesEntity objGetRelEncuestaClientes = new RelEncuestaClientesEntity();


            if ((FechaApli != null))
            {
                objRelEncuestaClientes.FechaApli = FechaApli;
            }

            if ((IdEncuesta != null))
            {
                objRelEncuestaClientes.IdEncuesta = IdEncuesta;
            }

            if ((Contrato != null))
            {
                objRelEncuestaClientes.Contrato = Contrato;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetRelEncuestaClientesPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRelEncuestaClientes));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetRelEncuestaClientesPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRelEncuestaClientes));
            }
            listResult.ToList().ForEach(x => listRelEncuestaClientes.Add(x));

            var RelEncuestaClientesAsIPagedList = new StaticPagedList<RelEncuestaClientesEntity>(listRelEncuestaClientes, pageNumber, pSize, listResult.totalCount);
            if (RelEncuestaClientesAsIPagedList.Count > 0)
            {
                return PartialView(RelEncuestaClientesAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        //public ActionResult Delete(int id = 0)
        //{
        //    int result = proxy.DeleteRelEncuestaClientes(RemoteIp, LoggedUserName, id);
        //    if (result > 0)
        //    {
        //        var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de RelEncuestaClientes Eliminado." };
        //        return Json(resultOk, JsonRequestBehavior.AllowGet);
        //    }
        //    else
        //    {
        //        var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de RelEncuestaClientes No puede ser Eliminado validar dependencias." };
        //        return Json(resultNg, JsonRequestBehavior.AllowGet);
        //    }
        //}


        public JsonResult Delete(int id)
        {
            proxy.DeleteRelEncuestaClientes(id);

            String mensaje = "{mensaje:'Se ha eliminado la Encuesta'}";
            return Json(mensaje, JsonRequestBehavior.AllowGet);
        }

        //Nuevas funciones 
        public ActionResult GetList(string data, int draw, int start, int length)
        {
            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordsFiltered = 0;
            dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length);
            dataTableData.recordsFiltered = recordsFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }

        private List<RelEncuestaClientesEntity> FiltrarContenido(ref int recordFiltered, int start, int length)
        {

            List<RelEncuestaClientesEntity> lista = proxy.GetRelEncuestaClientesList();
            recordFiltered = lista.Count;
            int rango = start + length;
            return lista.Skip(start).Take(length).ToList();
        }

        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<RelEncuestaClientesEntity> data { get; set; }
        }

    }

}

