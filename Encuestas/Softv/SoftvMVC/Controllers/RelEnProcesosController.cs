
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.RelEnProcesosController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : RelEnProcesosController
    /// File                    : RelEnProcesosController.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:19 p. m.
    ///</summary>
    public partial class RelEnProcesosController : BaseController, IDisposable
    {
        private SoftvService.RelEnProcesosClient proxy = null;

        private SoftvService.PreguntaClient proxyPregunta = null;

        private SoftvService.ResOpcMultsClient proxyResOpcMults = null;

        private SoftvService.RelEncuestaClientesClient proxyRelEncuestaClientes = null;

        public RelEnProcesosController()
        {


            proxy = new SoftvService.RelEnProcesosClient();

            proxyPregunta = new SoftvService.PreguntaClient();

            proxyResOpcMults = new SoftvService.ResOpcMultsClient();

            proxyRelEncuestaClientes = new SoftvService.RelEncuestaClientesClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            proxyPregunta = new SoftvService.PreguntaClient();
            if (proxyPregunta != null)
            {
                if (proxyPregunta.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyPregunta.Close();
                }
            }

            proxyResOpcMults = new SoftvService.ResOpcMultsClient();
            if (proxyResOpcMults != null)
            {
                if (proxyResOpcMults.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyResOpcMults.Close();
                }
            }

            proxyRelEncuestaClientes = new SoftvService.RelEncuestaClientesClient();
            if (proxyRelEncuestaClientes != null)
            {
                if (proxyRelEncuestaClientes.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyRelEncuestaClientes.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("RelEnProcesos");
            ViewData["Title"] = "RelEnProcesos";
            ViewData["Message"] = "RelEnProcesos";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<RelEnProcesosEntity> listResult = proxy.GetRelEnProcesosPagedListXml(pageNumber, pSize, SerializeTool.Serialize<RelEnProcesosEntity>(new RelEnProcesosEntity()));


            List<PreguntaEntity> lstPregunta = new List<PreguntaEntity>();
            lstPregunta.Add(new PreguntaEntity() { IdPregunta = null, Pregunta = "Todos" });
            lstPregunta.AddRange(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()));
            ViewBag.IdPreguntatxt = new SelectList(lstPregunta, "IdPregunta", "Pregunta");

            List<ResOpcMultsEntity> lstResOpcMults = new List<ResOpcMultsEntity>();
            lstResOpcMults.Add(new ResOpcMultsEntity() { Id_ResOpcMult = null, ResOpcMult = "Todos" });
            lstResOpcMults.AddRange(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()));
            ViewBag.Id_ResOpcMulttxt = new SelectList(lstResOpcMults, "Id_ResOpcMult", "ResOpcMult");

            //List<RelEncuestaClientesEntity> lstRelEncuestaClientes = new List<RelEncuestaClientesEntity>();
            //lstRelEncuestaClientes.Add(new RelEncuestaClientesEntity() { IdProceso = null, IdEncuesta = "Todos" });
            //lstRelEncuestaClientes.AddRange(proxyRelEncuestaClientes.GetRelEncuestaClientesList().OrderBy(x => x.IdEncuesta.Trim()));
            //ViewBag.IdProcesotxt = new SelectList(lstRelEncuestaClientes, "IdProceso", "IdEncuesta");

            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("RelEnProcesos");
            return View(new StaticPagedList<RelEnProcesosEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            RelEnProcesosEntity objRelEnProcesos = proxy.GetRelEnProcesos(id);
            if (objRelEnProcesos == null)
            {
                return HttpNotFound();
            }
            return PartialView(objRelEnProcesos);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("RelEnProcesos");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta");

            ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult");

            //ViewBag.VBRelEncuestaClientes = new SelectList(proxyRelEncuestaClientes.GetRelEncuestaClientesList().OrderBy(x => x.Nombre.Trim()).ToList(), "IdProceso", "Nombre");

            return View();
        }

        [HttpPost]
        public ActionResult Create(RelEnProcesosEntity objRelEnProcesos)
        {
            if (ModelState.IsValid)
            {

                objRelEnProcesos.BaseRemoteIp = RemoteIp;
                objRelEnProcesos.BaseIdUser = LoggedUserName;
                int result = proxy.AddRelEnProcesos(objRelEnProcesos);
                if (result == -1)
                {

                    ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta", objRelEnProcesos.IdPregunta);

                    ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult", objRelEnProcesos.Id_ResOpcMult);

                    //ViewBag.VBRelEncuestaClientes = new SelectList(proxyRelEncuestaClientes.GetRelEncuestaClientesList().Where(x => x.Estado == true).OrderBy(x => x.Nombre.Trim()).ToList(), "IdProceso", "Nombre", objRelEnProcesos.IdProceso);

                    AssingMessageScript("El RelEnProcesos ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objRelEnProcesos);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el RelEnProcesos en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objRelEnProcesos);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("RelEnProcesos");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            RelEnProcesosEntity objRelEnProcesos = proxy.GetRelEnProcesos(id);

            ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta");

            ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult");

            //ViewBag.VBRelEncuestaClientes = new SelectList(proxyRelEncuestaClientes.GetRelEncuestaClientesList().Where(x => x.Estado == true).OrderBy(x => x.Nombre.Trim()).ToList(), "IdProceso", "Nombre");

            if (objRelEnProcesos == null)
            {
                return HttpNotFound();
            }
            return View(objRelEnProcesos);
        }

        //
        // POST: /RelEnProcesos/Edit/5
        [HttpPost]
        public ActionResult Edit(RelEnProcesosEntity objRelEnProcesos)
        {
            if (ModelState.IsValid)
            {
                objRelEnProcesos.BaseRemoteIp = RemoteIp;
                objRelEnProcesos.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateRelEnProcesos(objRelEnProcesos);
                if (result == -1)
                {
                    RelEnProcesosEntity objRelEnProcesosOld = proxy.GetRelEnProcesos(objRelEnProcesos.IdProceso);

                    ViewBag.VBPregunta = new SelectList(proxyPregunta.GetPreguntaList().Where(x => x.IdPregunta == objRelEnProcesosOld.IdPregunta).OrderBy(x => x.Pregunta.Trim()).ToList(), "IdPregunta", "Pregunta", objRelEnProcesos.IdPregunta);

                    ViewBag.VBResOpcMults = new SelectList(proxyResOpcMults.GetResOpcMultsList().Where(x => x.Id_ResOpcMult == objRelEnProcesosOld.Id_ResOpcMult).OrderBy(x => x.ResOpcMult.Trim()).ToList(), "Id_ResOpcMult", "ResOpcMult", objRelEnProcesos.Id_ResOpcMult);

                    //ViewBag.VBRelEncuestaClientes = new SelectList(proxyRelEncuestaClientes.GetRelEncuestaClientesList().Where(x => x.Estado == true || x.IdProceso == objRelEnProcesosOld.IdProceso).OrderBy(x => x.Nombre.Trim()).ToList(), "IdProceso", "Nombre", objRelEnProcesos.IdProceso);

                    AssingMessageScript("El RelEnProcesos ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objRelEnProcesos);
                }
                if (result > 0)
                {
                    AssingMessageScript("El RelEnProcesos se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objRelEnProcesos);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String RespAbi, bool? RespCerrada, int? IdPregunta, int? Id_ResOpcMult, int? IdProceso)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<RelEnProcesosEntity> listResult = null;
            List<RelEnProcesosEntity> listRelEnProcesos = new List<RelEnProcesosEntity>();
            RelEnProcesosEntity objRelEnProcesos = new RelEnProcesosEntity();
            RelEnProcesosEntity objGetRelEnProcesos = new RelEnProcesosEntity();


            if ((RespAbi != null && RespAbi.ToString() != ""))
            {
                objRelEnProcesos.RespAbi = RespAbi;
            }

            if ((RespCerrada != null))
            {
                objRelEnProcesos.RespCerrada = RespCerrada;
            }

            if ((IdPregunta != null))
            {
                objRelEnProcesos.IdPregunta = IdPregunta;
            }

            if ((Id_ResOpcMult != null))
            {
                objRelEnProcesos.Id_ResOpcMult = Id_ResOpcMult;
            }

            if ((IdProceso != null))
            {
                objRelEnProcesos.IdProceso = IdProceso;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetRelEnProcesosPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRelEnProcesos));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetRelEnProcesosPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRelEnProcesos));
            }
            listResult.ToList().ForEach(x => listRelEnProcesos.Add(x));

            var RelEnProcesosAsIPagedList = new StaticPagedList<RelEnProcesosEntity>(listRelEnProcesos, pageNumber, pSize, listResult.totalCount);
            if (RelEnProcesosAsIPagedList.Count > 0)
            {
                return PartialView(RelEnProcesosAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteRelEnProcesos(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de RelEnProcesos Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de RelEnProcesos No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

