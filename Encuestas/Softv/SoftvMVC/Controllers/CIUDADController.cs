
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.CIUDADController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : CIUDADController
    /// File                    : CIUDADController.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:40 p. m.
    ///</summary>
    public partial class CIUDADController : BaseController, IDisposable
    {
        private SoftvService.CIUDADClient proxy = null;

        public CIUDADController()
        {

            proxy = new SoftvService.CIUDADClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("CIUDAD");
            ViewData["Title"] = "CIUDAD";
            ViewData["Message"] = "CIUDAD";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<CIUDADEntity> listResult = proxy.GetCIUDADPagedListXml(pageNumber, pSize, SerializeTool.Serialize<CIUDADEntity>(new CIUDADEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("CIUDAD");
            return View(new StaticPagedList<CIUDADEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            CIUDADEntity objCIUDAD = proxy.GetCIUDAD(id);
            if (objCIUDAD == null)
            {
                return HttpNotFound();
            }
            return PartialView(objCIUDAD);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("CIUDAD");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(CIUDADEntity objCIUDAD)
        {
            if (ModelState.IsValid)
            {

                objCIUDAD.BaseRemoteIp = RemoteIp;
                objCIUDAD.BaseIdUser = LoggedUserName;
                int result = proxy.AddCIUDAD(objCIUDAD);
                if (result == -1)
                {

                    AssingMessageScript("El CIUDAD ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objCIUDAD);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el CIUDAD en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objCIUDAD);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("CIUDAD");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            CIUDADEntity objCIUDAD = proxy.GetCIUDAD(id);

            if (objCIUDAD == null)
            {
                return HttpNotFound();
            }
            return View(objCIUDAD);
        }

        //
        // POST: /CIUDAD/Edit/5
        [HttpPost]
        public ActionResult Edit(CIUDADEntity objCIUDAD)
        {
            if (ModelState.IsValid)
            {
                objCIUDAD.BaseRemoteIp = RemoteIp;
                objCIUDAD.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateCIUDAD(objCIUDAD);
                if (result == -1)
                {
                    CIUDADEntity objCIUDADOld = proxy.GetCIUDAD(objCIUDAD.Clv_Ciudad);

                    AssingMessageScript("El CIUDAD ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objCIUDAD);
                }
                if (result > 0)
                {
                    AssingMessageScript("El CIUDAD se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objCIUDAD);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Nombre, int? CobroEspecial)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<CIUDADEntity> listResult = null;
            List<CIUDADEntity> listCIUDAD = new List<CIUDADEntity>();
            CIUDADEntity objCIUDAD = new CIUDADEntity();
            CIUDADEntity objGetCIUDAD = new CIUDADEntity();


            if ((Nombre != null && Nombre.ToString() != ""))
            {
                objCIUDAD.Nombre = Nombre;
            }

            if ((CobroEspecial != null))
            {
                objCIUDAD.CobroEspecial = CobroEspecial;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetCIUDADPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCIUDAD));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetCIUDADPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCIUDAD));
            }
            listResult.ToList().ForEach(x => listCIUDAD.Add(x));

            var CIUDADAsIPagedList = new StaticPagedList<CIUDADEntity>(listCIUDAD, pageNumber, pSize, listResult.totalCount);
            if (CIUDADAsIPagedList.Count > 0)
            {
                return PartialView(CIUDADAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteCIUDAD(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de CIUDAD Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de CIUDAD No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

