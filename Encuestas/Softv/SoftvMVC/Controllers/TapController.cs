
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.TapController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : TapController
    /// File                    : TapController.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:31 p. m.
    ///</summary>
    public partial class TapController : BaseController, IDisposable
    {
        private SoftvService.TapClient proxy = null;

        public TapController()
        {

            proxy = new SoftvService.TapClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("Tap");
            ViewData["Title"] = "Tap";
            ViewData["Message"] = "Tap";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<TapEntity> listResult = proxy.GetTapPagedListXml(pageNumber, pSize, SerializeTool.Serialize<TapEntity>(new TapEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("Tap");
            return View(new StaticPagedList<TapEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            TapEntity objTap = proxy.GetTap(id);
            if (objTap == null)
            {
                return HttpNotFound();
            }
            return PartialView(objTap);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("Tap");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(TapEntity objTap)
        {
            if (ModelState.IsValid)
            {

                objTap.BaseRemoteIp = RemoteIp;
                objTap.BaseIdUser = LoggedUserName;
                int result = proxy.AddTap(objTap);
                if (result == -1)
                {

                    AssingMessageScript("El Tap ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objTap);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Tap en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objTap);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Tap");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            TapEntity objTap = proxy.GetTap(id);

            if (objTap == null)
            {
                return HttpNotFound();
            }
            return View(objTap);
        }

        //
        // POST: /Tap/Edit/5
        [HttpPost]
        public ActionResult Edit(TapEntity objTap)
        {
            if (ModelState.IsValid)
            {
                objTap.BaseRemoteIp = RemoteIp;
                objTap.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateTap(objTap);
                if (result == -1)
                {
                    TapEntity objTapOld = proxy.GetTap(objTap.IdTap);

                    AssingMessageScript("El Tap ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objTap);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Tap se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objTap);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, int? Clv_Sector, int? Clv_Colonia, int? Clv_Calle, int? IdPoste, int? Ingenieria, int? Salidas, String Clave, int? NoCasas, int? NoNegocios, int? NoLotes, int? NoServicios, String FrenteANumero)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<TapEntity> listResult = null;
            List<TapEntity> listTap = new List<TapEntity>();
            TapEntity objTap = new TapEntity();
            TapEntity objGetTap = new TapEntity();


            if ((Clv_Sector != null))
            {
                objTap.Clv_Sector = Clv_Sector;
            }

            if ((Clv_Colonia != null))
            {
                objTap.Clv_Colonia = Clv_Colonia;
            }

            if ((Clv_Calle != null))
            {
                objTap.Clv_Calle = Clv_Calle;
            }

            if ((IdPoste != null))
            {
                objTap.IdPoste = IdPoste;
            }

            if ((Ingenieria != null))
            {
                objTap.Ingenieria = Ingenieria;
            }

            if ((Salidas != null))
            {
                objTap.Salidas = Salidas;
            }

            if ((Clave != null && Clave.ToString() != ""))
            {
                objTap.Clave = Clave;
            }

            if ((NoCasas != null))
            {
                objTap.NoCasas = NoCasas;
            }

            if ((NoNegocios != null))
            {
                objTap.NoNegocios = NoNegocios;
            }

            if ((NoLotes != null))
            {
                objTap.NoLotes = NoLotes;
            }

            if ((NoServicios != null))
            {
                objTap.NoServicios = NoServicios;
            }

            if ((FrenteANumero != null && FrenteANumero.ToString() != ""))
            {
                objTap.FrenteANumero = FrenteANumero;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetTapPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTap));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetTapPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTap));
            }
            listResult.ToList().ForEach(x => listTap.Add(x));

            var TapAsIPagedList = new StaticPagedList<TapEntity>(listTap, pageNumber, pSize, listResult.totalCount);
            if (TapAsIPagedList.Count > 0)
            {
                return PartialView(TapAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteTap(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de Tap Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de Tap No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

