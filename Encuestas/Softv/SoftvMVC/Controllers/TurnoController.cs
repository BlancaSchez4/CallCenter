
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.TurnoController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : TurnoController
    /// File                    : TurnoController.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:21 p. m.
    ///</summary>
    public partial class TurnoController : BaseController, IDisposable
    {
        private SoftvService.TurnoClient proxy = null;

        public TurnoController()
        {

            proxy = new SoftvService.TurnoClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("Turno");
            ViewData["Title"] = "Turno";
            ViewData["Message"] = "Turno";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<TurnoEntity> listResult = proxy.GetTurnoPagedListXml(pageNumber, pSize, SerializeTool.Serialize<TurnoEntity>(new TurnoEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("Turno");
            return View(new StaticPagedList<TurnoEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            TurnoEntity objTurno = proxy.GetTurno(id);
            if (objTurno == null)
            {
                return HttpNotFound();
            }
            return PartialView(objTurno);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("Turno");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(TurnoEntity objTurno)
        {
            if (ModelState.IsValid)
            {

                objTurno.BaseRemoteIp = RemoteIp;
                objTurno.BaseIdUser = LoggedUserName;
                int result = proxy.AddTurno(objTurno);
                if (result == -1)
                {

                    AssingMessageScript("El Turno ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objTurno);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Turno en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objTurno);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Turno");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            TurnoEntity objTurno = proxy.GetTurno(id);

            if (objTurno == null)
            {
                return HttpNotFound();
            }
            return View(objTurno);
        }

        //
        // POST: /Turno/Edit/5
        [HttpPost]
        public ActionResult Edit(TurnoEntity objTurno)
        {
            if (ModelState.IsValid)
            {
                objTurno.BaseRemoteIp = RemoteIp;
                objTurno.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateTurno(objTurno);
                if (result == -1)
                {
                    TurnoEntity objTurnoOld = proxy.GetTurno(objTurno.IdTurno);

                    AssingMessageScript("El Turno ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objTurno);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Turno se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objTurno);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Turno)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<TurnoEntity> listResult = null;
            List<TurnoEntity> listTurno = new List<TurnoEntity>();
            TurnoEntity objTurno = new TurnoEntity();
            TurnoEntity objGetTurno = new TurnoEntity();


            if ((Turno != null && Turno.ToString() != ""))
            {
                objTurno.Turno = Turno;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetTurnoPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTurno));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetTurnoPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTurno));
            }
            listResult.ToList().ForEach(x => listTurno.Add(x));

            var TurnoAsIPagedList = new StaticPagedList<TurnoEntity>(listTurno, pageNumber, pSize, listResult.totalCount);
            if (TurnoAsIPagedList.Count > 0)
            {
                return PartialView(TurnoAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteTurno(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de Turno Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de Turno No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

