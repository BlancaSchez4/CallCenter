
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.CALLEController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : CALLEController
    /// File                    : CALLEController.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:40 p. m.
    ///</summary>
    public partial class CALLEController : BaseController, IDisposable
    {
        private SoftvService.CALLEClient proxy = null;

        public CALLEController()
        {


            proxy = new SoftvService.CALLEClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("CALLE");
            ViewData["Title"] = "CALLE";
            ViewData["Message"] = "CALLE";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<CALLEEntity> listResult = proxy.GetCALLEPagedListXml(pageNumber, pSize, SerializeTool.Serialize<CALLEEntity>(new CALLEEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("CALLE");
            return View(new StaticPagedList<CALLEEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            CALLEEntity objCALLE = proxy.GetCALLE(id);
            if (objCALLE == null)
            {
                return HttpNotFound();
            }
            return PartialView(objCALLE);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("CALLE");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(CALLEEntity objCALLE)
        {
            if (ModelState.IsValid)
            {

                objCALLE.BaseRemoteIp = RemoteIp;
                objCALLE.BaseIdUser = LoggedUserName;
                int result = proxy.AddCALLE(objCALLE);
                if (result == -1)
                {

                    AssingMessageScript("El CALLE ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objCALLE);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el CALLE en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objCALLE);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("CALLE");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            CALLEEntity objCALLE = proxy.GetCALLE(id);

            if (objCALLE == null)
            {
                return HttpNotFound();
            }
            return View(objCALLE);
        }

        //
        // POST: /CALLE/Edit/5
        [HttpPost]
        public ActionResult Edit(CALLEEntity objCALLE)
        {
            if (ModelState.IsValid)
            {
                objCALLE.BaseRemoteIp = RemoteIp;
                objCALLE.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateCALLE(objCALLE);
                if (result == -1)
                {
                    CALLEEntity objCALLEOld = proxy.GetCALLE(objCALLE.Clv_Calle);

                    AssingMessageScript("El CALLE ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objCALLE);
                }
                if (result > 0)
                {
                    AssingMessageScript("El CALLE se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objCALLE);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Nombre)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<CALLEEntity> listResult = null;
            List<CALLEEntity> listCALLE = new List<CALLEEntity>();
            CALLEEntity objCALLE = new CALLEEntity();
            CALLEEntity objGetCALLE = new CALLEEntity();


            if ((Nombre != null && Nombre.ToString() != ""))
            {
                objCALLE.Nombre = Nombre;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetCALLEPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCALLE));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetCALLEPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCALLE));
            }
            listResult.ToList().ForEach(x => listCALLE.Add(x));

            var CALLEAsIPagedList = new StaticPagedList<CALLEEntity>(listCALLE, pageNumber, pSize, listResult.totalCount);
            if (CALLEAsIPagedList.Count > 0)
            {
                return PartialView(CALLEAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteCALLE(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de CALLE Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de CALLE No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

