
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;

using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.TrabajoController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : TrabajoController
    /// File                    : TrabajoController.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:21 p. m.
    ///</summary>
    public partial class TrabajoController : BaseController, IDisposable
    {
        private SoftvService.TrabajoClient proxy = null;

        public TrabajoController()
        {


            proxy = new SoftvService.TrabajoClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("Trabajo");
            ViewData["Title"] = "Trabajo";
            ViewData["Message"] = "Trabajo";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<TrabajoEntity> listResult = proxy.GetTrabajoPagedListXml(pageNumber, pSize, SerializeTool.Serialize<TrabajoEntity>(new TrabajoEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("Trabajo");
            return View(new StaticPagedList<TrabajoEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            TrabajoEntity objTrabajo = proxy.GetTrabajo(id);
            if (objTrabajo == null)
            {
                return HttpNotFound();
            }
            return PartialView(objTrabajo);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("Trabajo");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(TrabajoEntity objTrabajo)
        {
            if (ModelState.IsValid)
            {

                objTrabajo.BaseRemoteIp = RemoteIp;
                objTrabajo.BaseIdUser = LoggedUserName;
                int result = proxy.AddTrabajo(objTrabajo);
                if (result == -1)
                {

                    AssingMessageScript("El Trabajo ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objTrabajo);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Trabajo en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objTrabajo);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Trabajo");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            TrabajoEntity objTrabajo = proxy.GetTrabajo(id);

            if (objTrabajo == null)
            {
                return HttpNotFound();
            }
            return View(objTrabajo);
        }

        //
        // POST: /Trabajo/Edit/5
        [HttpPost]
        public ActionResult Edit(TrabajoEntity objTrabajo)
        {
            if (ModelState.IsValid)
            {
                objTrabajo.BaseRemoteIp = RemoteIp;
                objTrabajo.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateTrabajo(objTrabajo);
                if (result == -1)
                {
                    TrabajoEntity objTrabajoOld = proxy.GetTrabajo(objTrabajo.Clv_Trabajo);

                    AssingMessageScript("El Trabajo ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objTrabajo);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Trabajo se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objTrabajo);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String TRABAJO, int? Clv_TipSer, String DESCRIPCION, Decimal? PUNTOS, bool? Cobranza, String Tipo, bool? Prospectos, bool? SICA, bool? SeCobraMaterial)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<TrabajoEntity> listResult = null;
            List<TrabajoEntity> listTrabajo = new List<TrabajoEntity>();
            TrabajoEntity objTrabajo = new TrabajoEntity();
            TrabajoEntity objGetTrabajo = new TrabajoEntity();


            if ((TRABAJO != null && TRABAJO.ToString() != ""))
            {
                objTrabajo.TRABAJO = TRABAJO;
            }

            if ((Clv_TipSer != null))
            {
                objTrabajo.Clv_TipSer = Clv_TipSer;
            }

            if ((DESCRIPCION != null && DESCRIPCION.ToString() != ""))
            {
                objTrabajo.DESCRIPCION = DESCRIPCION;
            }

            if ((PUNTOS != null))
            {
                objTrabajo.PUNTOS = PUNTOS;
            }

            if ((Cobranza != null))
            {
                objTrabajo.Cobranza = Cobranza;
            }

            if ((Tipo != null && Tipo.ToString() != ""))
            {
                objTrabajo.Tipo = Tipo;
            }

            if ((Prospectos != null))
            {
                objTrabajo.Prospectos = Prospectos;
            }

            if ((SICA != null))
            {
                objTrabajo.SICA = SICA;
            }

            if ((SeCobraMaterial != null))
            {
                objTrabajo.SeCobraMaterial = SeCobraMaterial;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetTrabajoPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTrabajo));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetTrabajoPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTrabajo));
            }
            listResult.ToList().ForEach(x => listTrabajo.Add(x));

            var TrabajoAsIPagedList = new StaticPagedList<TrabajoEntity>(listTrabajo, pageNumber, pSize, listResult.totalCount);
            if (TrabajoAsIPagedList.Count > 0)
            {
                return PartialView(TrabajoAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteTrabajo(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de Trabajo Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de Trabajo No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

