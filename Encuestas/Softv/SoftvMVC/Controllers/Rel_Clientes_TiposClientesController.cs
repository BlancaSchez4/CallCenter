
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.Rel_Clientes_TiposClientesController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : Rel_Clientes_TiposClientesController
    /// File                    : Rel_Clientes_TiposClientesController.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 05:56 p. m.
    ///</summary>
    public partial class Rel_Clientes_TiposClientesController : BaseController, IDisposable
    {
        private SoftvService.Rel_Clientes_TiposClientesClient proxy = null;

        private SoftvService.TipoClienteClient proxyTipoCliente = null;

        public Rel_Clientes_TiposClientesController()
        {


            proxy = new SoftvService.Rel_Clientes_TiposClientesClient();

            proxyTipoCliente = new SoftvService.TipoClienteClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            proxyTipoCliente = new SoftvService.TipoClienteClient();
            if (proxyTipoCliente != null)
            {
                if (proxyTipoCliente.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyTipoCliente.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("Rel_Clientes_TiposClientes");
            ViewData["Title"] = "Rel_Clientes_TiposClientes";
            ViewData["Message"] = "Rel_Clientes_TiposClientes";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<Rel_Clientes_TiposClientesEntity> listResult = proxy.GetRel_Clientes_TiposClientesPagedListXml(pageNumber, pSize, SerializeTool.Serialize<Rel_Clientes_TiposClientesEntity>(new Rel_Clientes_TiposClientesEntity()));


            //List<TipoClienteEntity> lstTipoCliente = new List<TipoClienteEntity>();
            //lstTipoCliente.Add(new TipoClienteEntity() { Clv_TipoCliente = null, Nombre = "Todos" });
            //lstTipoCliente.AddRange(proxyTipoCliente.GetTipoClienteList().OrderBy(x => x.Nombre.Trim()));
            //ViewBag.Clv_TipoClientetxt = new SelectList(lstTipoCliente, "Clv_TipoCliente", "Nombre");

            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("Rel_Clientes_TiposClientes");
            return View(new StaticPagedList<Rel_Clientes_TiposClientesEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            Rel_Clientes_TiposClientesEntity objRel_Clientes_TiposClientes = proxy.GetRel_Clientes_TiposClientes(id);
            if (objRel_Clientes_TiposClientes == null)
            {
                return HttpNotFound();
            }
            return PartialView(objRel_Clientes_TiposClientes);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("Rel_Clientes_TiposClientes");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            ViewBag.VBTipoCliente = new SelectList(proxyTipoCliente.GetTipoClienteList().OrderBy(x => x.Descripcion.Trim()).ToList(), "Clv_TipoCliente", "Descripcion");

            return View();
        }

        [HttpPost]
        public ActionResult Create(Rel_Clientes_TiposClientesEntity objRel_Clientes_TiposClientes)
        {
            if (ModelState.IsValid)
            {

                objRel_Clientes_TiposClientes.BaseRemoteIp = RemoteIp;
                objRel_Clientes_TiposClientes.BaseIdUser = LoggedUserName;
                int result = proxy.AddRel_Clientes_TiposClientes(objRel_Clientes_TiposClientes);
                if (result == -1)
                {

                    ViewBag.VBTipoCliente = new SelectList(proxyTipoCliente.GetTipoClienteList().OrderBy(x => x.Descripcion.Trim()).ToList(), "Clv_TipoCliente", "Descripcion", objRel_Clientes_TiposClientes.Clv_TipoCliente);

                    AssingMessageScript("El Rel_Clientes_TiposClientes ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objRel_Clientes_TiposClientes);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Rel_Clientes_TiposClientes en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objRel_Clientes_TiposClientes);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Rel_Clientes_TiposClientes");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            Rel_Clientes_TiposClientesEntity objRel_Clientes_TiposClientes = proxy.GetRel_Clientes_TiposClientes(id);

            ViewBag.VBTipoCliente = new SelectList(proxyTipoCliente.GetTipoClienteList().OrderBy(x => x.Descripcion.Trim()).ToList(), "Clv_TipoCliente", "Descripcion");

            if (objRel_Clientes_TiposClientes == null)
            {
                return HttpNotFound();
            }
            return View(objRel_Clientes_TiposClientes);
        }

        //
        // POST: /Rel_Clientes_TiposClientes/Edit/5
        [HttpPost]
        public ActionResult Edit(Rel_Clientes_TiposClientesEntity objRel_Clientes_TiposClientes)
        {
            if (ModelState.IsValid)
            {
                objRel_Clientes_TiposClientes.BaseRemoteIp = RemoteIp;
                objRel_Clientes_TiposClientes.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateRel_Clientes_TiposClientes(objRel_Clientes_TiposClientes);
                if (result == -1)
                {
                    Rel_Clientes_TiposClientesEntity objRel_Clientes_TiposClientesOld = proxy.GetRel_Clientes_TiposClientes(objRel_Clientes_TiposClientes.CONTRATO);

                    ViewBag.VBTipoCliente = new SelectList(proxyTipoCliente.GetTipoClienteList().Where(x => x.Clv_TipoCliente == objRel_Clientes_TiposClientesOld.Clv_TipoCliente).OrderBy(x => x.Descripcion.Trim()).ToList(), "Clv_TipoCliente", "Descripcion", objRel_Clientes_TiposClientes.Clv_TipoCliente);

                    AssingMessageScript("El Rel_Clientes_TiposClientes ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objRel_Clientes_TiposClientes);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Rel_Clientes_TiposClientes se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objRel_Clientes_TiposClientes);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, long? CONTRATO, int? Clv_TipoCliente)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<Rel_Clientes_TiposClientesEntity> listResult = null;
            List<Rel_Clientes_TiposClientesEntity> listRel_Clientes_TiposClientes = new List<Rel_Clientes_TiposClientesEntity>();
            Rel_Clientes_TiposClientesEntity objRel_Clientes_TiposClientes = new Rel_Clientes_TiposClientesEntity();
            Rel_Clientes_TiposClientesEntity objGetRel_Clientes_TiposClientes = new Rel_Clientes_TiposClientesEntity();


            if ((CONTRATO != null))
            {
                objRel_Clientes_TiposClientes.CONTRATO = CONTRATO;
            }

            if ((Clv_TipoCliente != null))
            {
                objRel_Clientes_TiposClientes.Clv_TipoCliente = Clv_TipoCliente;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetRel_Clientes_TiposClientesPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRel_Clientes_TiposClientes));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetRel_Clientes_TiposClientesPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRel_Clientes_TiposClientes));
            }
            listResult.ToList().ForEach(x => listRel_Clientes_TiposClientes.Add(x));

            var Rel_Clientes_TiposClientesAsIPagedList = new StaticPagedList<Rel_Clientes_TiposClientesEntity>(listRel_Clientes_TiposClientes, pageNumber, pSize, listResult.totalCount);
            if (Rel_Clientes_TiposClientesAsIPagedList.Count > 0)
            {
                return PartialView(Rel_Clientes_TiposClientesAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteRel_Clientes_TiposClientes(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de Rel_Clientes_TiposClientes Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de Rel_Clientes_TiposClientes No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

