
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.TipoPreguntasController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : TipoPreguntasController
    /// File                    : TipoPreguntasController.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:15 p. m.
    ///</summary>
    public partial class TipoPreguntasController : BaseController, IDisposable
    {
        private SoftvService.TipoPreguntasClient proxy = null;

        public TipoPreguntasController()
        {

            proxy = new SoftvService.TipoPreguntasClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("TipoPreguntas");
            ViewData["Title"] = "TipoPreguntas";
            ViewData["Message"] = "TipoPreguntas";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<TipoPreguntasEntity> listResult = proxy.GetTipoPreguntasPagedListXml(pageNumber, pSize, SerializeTool.Serialize<TipoPreguntasEntity>(new TipoPreguntasEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("TipoPreguntas");
            return View(new StaticPagedList<TipoPreguntasEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            TipoPreguntasEntity objTipoPreguntas = proxy.GetTipoPreguntas(id);
            if (objTipoPreguntas == null)
            {
                return HttpNotFound();
            }
            return PartialView(objTipoPreguntas);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("TipoPreguntas");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(TipoPreguntasEntity objTipoPreguntas)
        {
            if (ModelState.IsValid)
            {

                objTipoPreguntas.BaseRemoteIp = RemoteIp;
                objTipoPreguntas.BaseIdUser = LoggedUserName;
                int result = proxy.AddTipoPreguntas(objTipoPreguntas);
                if (result == -1)
                {

                    AssingMessageScript("El Tipo Pregunta ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objTipoPreguntas);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Tipo Preguntas en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objTipoPreguntas);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("TipoPreguntas");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            TipoPreguntasEntity objTipoPreguntas = proxy.GetTipoPreguntas(id);

            if (objTipoPreguntas == null)
            {
                return HttpNotFound();
            }
            return View(objTipoPreguntas);
        }

        //
        // POST: /TipoPreguntas/Edit/5
        [HttpPost]
        public ActionResult Edit(TipoPreguntasEntity objTipoPreguntas)
        {
            if (ModelState.IsValid)
            {
                objTipoPreguntas.BaseRemoteIp = RemoteIp;
                objTipoPreguntas.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateTipoPreguntas(objTipoPreguntas);
                if (result == -1)
                {
                    TipoPreguntasEntity objTipoPreguntasOld = proxy.GetTipoPreguntas(objTipoPreguntas.IdTipoPregunta);

                    AssingMessageScript("El Tipo Preguntas ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objTipoPreguntas);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Tipo Preguntas se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objTipoPreguntas);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Descripcion)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<TipoPreguntasEntity> listResult = null;
            List<TipoPreguntasEntity> listTipoPreguntas = new List<TipoPreguntasEntity>();
            TipoPreguntasEntity objTipoPreguntas = new TipoPreguntasEntity();
            TipoPreguntasEntity objGetTipoPreguntas = new TipoPreguntasEntity();


            if ((Descripcion != null && Descripcion.ToString() != ""))
            {
                objTipoPreguntas.Descripcion = Descripcion;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetTipoPreguntasPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTipoPreguntas));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetTipoPreguntasPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTipoPreguntas));
            }
            listResult.ToList().ForEach(x => listTipoPreguntas.Add(x));

            var TipoPreguntasAsIPagedList = new StaticPagedList<TipoPreguntasEntity>(listTipoPreguntas, pageNumber, pSize, listResult.totalCount);
            if (TipoPreguntasAsIPagedList.Count > 0)
            {
                return PartialView(TipoPreguntasAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        //public ActionResult Delete(int id = 0)
        //{
        //    int result = proxy.DeleteTipoPreguntas(RemoteIp, LoggedUserName, id);
        //    if (result > 0)
        //    {
        //        var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de TipoPreguntas Eliminado." };
        //        return Json(resultOk, JsonRequestBehavior.AllowGet);
        //    }
        //    else
        //    {
        //        var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de TipoPreguntas No puede ser Eliminado validar dependencias." };
        //        return Json(resultNg, JsonRequestBehavior.AllowGet);
        //    }
        //}

        public JsonResult Delete(int id)
        {
            proxy.DeleteTipoPreguntas(id);

            String mensaje = "{mensaje:'Se ha eliminado el Tipo Pregunta'}";
            return Json(mensaje, JsonRequestBehavior.AllowGet);
        }

        //Nuevas funciones 

        public ActionResult GetList(string data, int draw, int start, int length)
        {
            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordsFiltered = 0;
            dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length);
            dataTableData.recordsFiltered = recordsFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }

        private List<TipoPreguntasEntity> FiltrarContenido(ref int recordFiltered, int start, int length)
        {

            List<TipoPreguntasEntity> lista = proxy.GetTipoPreguntasList();
            recordFiltered = lista.Count;
            int rango = start + length;
            return lista.Skip(start).Take(length).ToList();
        }

        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<TipoPreguntasEntity> data { get; set; }
        }

    }

}

