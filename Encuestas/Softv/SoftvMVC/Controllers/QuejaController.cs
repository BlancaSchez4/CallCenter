
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.QuejaController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : QuejaController
    /// File                    : QuejaController.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:37 p. m.
    ///</summary>
    public partial class QuejaController : BaseController, IDisposable
    {
        private SoftvService.QuejaClient proxy = null;

        public QuejaController()
        {


            proxy = new SoftvService.QuejaClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("Queja");
            ViewData["Title"] = "Queja";
            ViewData["Message"] = "Queja";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<QuejaEntity> listResult = proxy.GetQuejaPagedListXml(pageNumber, pSize, SerializeTool.Serialize<QuejaEntity>(new QuejaEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("Queja");
            return View(new StaticPagedList<QuejaEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            QuejaEntity objQueja = proxy.GetQueja(id);
            if (objQueja == null)
            {
                return HttpNotFound();
            }
            return PartialView(objQueja);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("Queja");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(QuejaEntity objQueja)
        {
            if (ModelState.IsValid)
            {

                objQueja.BaseRemoteIp = RemoteIp;
                objQueja.BaseIdUser = LoggedUserName;
                int result = proxy.AddQueja(objQueja);
                if (result == -1)
                {

                    AssingMessageScript("El Queja ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objQueja);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Queja en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objQueja);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Queja");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            QuejaEntity objQueja = proxy.GetQueja(id);

            if (objQueja == null)
            {
                return HttpNotFound();
            }
            return View(objQueja);
        }

        //
        // POST: /Queja/Edit/5
        [HttpPost]
        public ActionResult Edit(QuejaEntity objQueja)
        {
            if (ModelState.IsValid)
            {
                objQueja.BaseRemoteIp = RemoteIp;
                objQueja.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateQueja(objQueja);
                if (result == -1)
                {
                    QuejaEntity objQuejaOld = proxy.GetQueja(objQueja.Clv_Queja);

                    AssingMessageScript("El Queja ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objQueja);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Queja se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objQueja);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, int? Clv_TipSer, long? Contrato, DateTime? Fecha_Soliciutud, DateTime? Fecha_Ejecucion, String Observaciones, String Status, int? Clave_Tecnico, String Problema, String Solucion, DateTime? Fecha_Actualizacion, DateTime? Fecha_Captura, String Clv_TipoQueja, String Imp, String Clasificacion, DateTime? Hora_Ejecucion, int? Clv_Trabajo, bool? Impresa, DateTime? Visita1, DateTime? Visita2, DateTime? Visita3, int? clvPrioridadQueja)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<QuejaEntity> listResult = null;
            List<QuejaEntity> listQueja = new List<QuejaEntity>();
            QuejaEntity objQueja = new QuejaEntity();
            QuejaEntity objGetQueja = new QuejaEntity();


            if ((Clv_TipSer != null))
            {
                objQueja.Clv_TipSer = Clv_TipSer;
            }

            if ((Contrato != null))
            {
                objQueja.Contrato = Contrato;
            }

            if ((Fecha_Soliciutud != null))
            {
                objQueja.Fecha_Soliciutud = Fecha_Soliciutud;
            }

            if ((Fecha_Ejecucion != null))
            {
                objQueja.Fecha_Ejecucion = Fecha_Ejecucion;
            }

            if ((Observaciones != null && Observaciones.ToString() != ""))
            {
                objQueja.Observaciones = Observaciones;
            }

            if ((Status != null && Status.ToString() != ""))
            {
                objQueja.Status = Status;
            }

            if ((Clave_Tecnico != null))
            {
                objQueja.Clave_Tecnico = Clave_Tecnico;
            }

            if ((Problema != null && Problema.ToString() != ""))
            {
                objQueja.Problema = Problema;
            }

            if ((Solucion != null && Solucion.ToString() != ""))
            {
                objQueja.Solucion = Solucion;
            }

            if ((Fecha_Actualizacion != null))
            {
                objQueja.Fecha_Actualizacion = Fecha_Actualizacion;
            }

            if ((Fecha_Captura != null))
            {
                objQueja.Fecha_Captura = Fecha_Captura;
            }

            if ((Clv_TipoQueja != null && Clv_TipoQueja.ToString() != ""))
            {
                objQueja.Clv_TipoQueja = Clv_TipoQueja;
            }

            if ((Imp != null && Imp.ToString() != ""))
            {
                objQueja.Imp = Imp;
            }

            if ((Clasificacion != null && Clasificacion.ToString() != ""))
            {
                objQueja.Clasificacion = Clasificacion;
            }

            if ((Hora_Ejecucion != null))
            {
                objQueja.Hora_Ejecucion = Hora_Ejecucion;
            }

            if ((Clv_Trabajo != null))
            {
                objQueja.Clv_Trabajo = Clv_Trabajo;
            }

            if ((Impresa != null))
            {
                objQueja.Impresa = Impresa;
            }

            if ((Visita1 != null))
            {
                objQueja.Visita1 = Visita1;
            }

            if ((Visita2 != null))
            {
                objQueja.Visita2 = Visita2;
            }

            if ((Visita3 != null))
            {
                objQueja.Visita3 = Visita3;
            }

            if ((clvPrioridadQueja != null))
            {
                objQueja.clvPrioridadQueja = clvPrioridadQueja;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetQuejaPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objQueja));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetQuejaPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objQueja));
            }
            listResult.ToList().ForEach(x => listQueja.Add(x));

            var QuejaAsIPagedList = new StaticPagedList<QuejaEntity>(listQueja, pageNumber, pSize, listResult.totalCount);
            if (QuejaAsIPagedList.Count > 0)
            {
                return PartialView(QuejaAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteQueja(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de Queja Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de Queja No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

