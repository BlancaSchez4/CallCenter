
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : TipServBussines
/// File                    : TipServBussines.cs
/// Creation date           : 04/05/2016
/// Creation time           : 06:40 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class TipServ
    {

        #region Constructors
        public TipServ() { }
        #endregion

        /// <summary>
        ///Adds TipServ
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(TipServEntity objTipServ)
        {
            int result = ProviderSoftv.TipServ.AddTipServ(objTipServ);
            return result;
        }

        /// <summary>
        ///Delete TipServ
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? Clv_TipSer)
        {
            int resultado = ProviderSoftv.TipServ.DeleteTipServ(Clv_TipSer);
            return resultado;
        }

        /// <summary>
        ///Update TipServ
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(TipServEntity objTipServ)
        {
            int result = ProviderSoftv.TipServ.EditTipServ(objTipServ);
            return result;
        }

        /// <summary>
        ///Get TipServ
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TipServEntity> GetAll()
        {
            List<TipServEntity> entities = new List<TipServEntity>();
            entities = ProviderSoftv.TipServ.GetTipServ();

            List<LlamadaEntity> lLlamada = ProviderSoftv.Llamada.GetLlamada(entities.Where(x => x.Clv_TipSer.HasValue).Select(x => x.Clv_TipSer.Value).ToList());
            lLlamada.ForEach(XLlamada => entities.Where(x => x.Clv_TipSer.HasValue).Where(x => x.Clv_TipSer == XLlamada.Clv_TipSer).ToList().ForEach(y => y.Llamada = XLlamada));

            return entities ?? new List<TipServEntity>();
        }

        /// <summary>
        ///Get TipServ List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TipServEntity> GetAll(List<int> lid)
        {
            List<TipServEntity> entities = new List<TipServEntity>();
            entities = ProviderSoftv.TipServ.GetTipServ(lid);
            return entities ?? new List<TipServEntity>();
        }

        /// <summary>
        ///Get TipServ By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static TipServEntity GetOne(int? Clv_TipSer)
        {
            TipServEntity result = ProviderSoftv.TipServ.GetTipServById(Clv_TipSer);

            if (result.Clv_TipSer != null)
                result.Llamada = ProviderSoftv.Llamada.GetLlamadaById(result.Clv_TipSer);

            return result;
        }

        /// <summary>
        ///Get TipServ By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static TipServEntity GetOneDeep(int? Clv_TipSer)
        {
            TipServEntity result = ProviderSoftv.TipServ.GetTipServById(Clv_TipSer);

            if (result.Clv_TipSer != null)
                result.Llamada = ProviderSoftv.Llamada.GetLlamadaById(result.Clv_TipSer);

            return result;
        }

        public static List<TipServEntity> GetTipServByClv_TipSer(int? Clv_TipSer)
        {
            List<TipServEntity> entities = new List<TipServEntity>();
            entities = ProviderSoftv.TipServ.GetTipServByClv_TipSer(Clv_TipSer);
            return entities ?? new List<TipServEntity>();
        }



        /// <summary>
        ///Get TipServ
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<TipServEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<TipServEntity> entities = new SoftvList<TipServEntity>();
            entities = ProviderSoftv.TipServ.GetPagedList(pageIndex, pageSize);

            List<LlamadaEntity> lLlamada = ProviderSoftv.Llamada.GetLlamada(entities.Where(x => x.Clv_TipSer.HasValue).Select(x => x.Clv_TipSer.Value).Distinct().ToList());
            lLlamada.ForEach(XLlamada => entities.Where(x => x.Clv_TipSer.HasValue).Where(x => x.Clv_TipSer == XLlamada.Clv_TipSer).ToList().ForEach(y => y.Llamada = XLlamada));

            return entities ?? new SoftvList<TipServEntity>();
        }

        /// <summary>
        ///Get TipServ
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<TipServEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<TipServEntity> entities = new SoftvList<TipServEntity>();
            entities = ProviderSoftv.TipServ.GetPagedList(pageIndex, pageSize, xml);

            List<LlamadaEntity> lLlamada = ProviderSoftv.Llamada.GetLlamada(entities.Where(x => x.Clv_TipSer.HasValue).Select(x => x.Clv_TipSer.Value).Distinct().ToList());
            lLlamada.ForEach(XLlamada => entities.Where(x => x.Clv_TipSer.HasValue).Where(x => x.Clv_TipSer == XLlamada.Clv_TipSer).ToList().ForEach(y => y.Llamada = XLlamada));

            return entities ?? new SoftvList<TipServEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
