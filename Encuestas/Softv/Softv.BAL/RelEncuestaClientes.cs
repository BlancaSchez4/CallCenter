
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : RelEncuestaClientesBussines
/// File                    : RelEncuestaClientesBussines.cs
/// Creation date           : 02/05/2016
/// Creation time           : 06:39 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class RelEncuestaClientes
    {

        #region Constructors
        public RelEncuestaClientes() { }
        #endregion

        /// <summary>
        ///Adds RelEncuestaClientes
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(RelEncuestaClientesEntity objRelEncuestaClientes)
        {
            int result = ProviderSoftv.RelEncuestaClientes.AddRelEncuestaClientes(objRelEncuestaClientes);
            return result;
        }

        /// <summary>
        ///Delete RelEncuestaClientes
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? IdProceso)
        {
            int resultado = ProviderSoftv.RelEncuestaClientes.DeleteRelEncuestaClientes(IdProceso);
            return resultado;
        }

        /// <summary>
        ///Update RelEncuestaClientes
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(RelEncuestaClientesEntity objRelEncuestaClientes)
        {
            int result = ProviderSoftv.RelEncuestaClientes.EditRelEncuestaClientes(objRelEncuestaClientes);
            return result;
        }

        /// <summary>
        ///Get RelEncuestaClientes
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<RelEncuestaClientesEntity> GetAll()
        {
            List<RelEncuestaClientesEntity> entities = new List<RelEncuestaClientesEntity>();
            entities = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientes();

            List<EncuestaEntity> lEncuesta = ProviderSoftv.Encuesta.GetEncuesta(entities.Where(x => x.IdEncuesta.HasValue).Select(x => x.IdEncuesta.Value).ToList());
            lEncuesta.ForEach(XEncuesta => entities.Where(x => x.IdEncuesta.HasValue).Where(x => x.IdEncuesta == XEncuesta.IdEncuesta).ToList().ForEach(y => y.Encuesta = XEncuesta));

            List<CLIENTEEntity> lCLIENTE = ProviderSoftv.CLIENTE.GetCLIENTE(entities.Where(x => x.Contrato.HasValue).Select(x => x.Contrato.Value).ToList());
            lCLIENTE.ForEach(XCLIENTE => entities.Where(x => x.Contrato.HasValue).Where(x => x.Contrato == XCLIENTE.CONTRATO).ToList().ForEach(y => y.CLIENTE = XCLIENTE));

            List<RelEnProcesosEntity> lRelEnProcesos = ProviderSoftv.RelEnProcesos.GetRelEnProcesos(entities.Where(x => x.IdProceso.HasValue).Select(x => x.IdProceso.Value).ToList());
            lRelEnProcesos.ForEach(XRelEnProcesos => entities.Where(x => x.IdProceso.HasValue).Where(x => x.IdProceso == XRelEnProcesos.IdProceso).ToList().ForEach(y => y.RelEnProcesos = XRelEnProcesos));

            return entities ?? new List<RelEncuestaClientesEntity>();
        }

        /// <summary>
        ///Get RelEncuestaClientes List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<RelEncuestaClientesEntity> GetAll(List<int> lid)
        {
            List<RelEncuestaClientesEntity> entities = new List<RelEncuestaClientesEntity>();
            entities = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientes(lid);
            return entities ?? new List<RelEncuestaClientesEntity>();
        }

        /// <summary>
        ///Get RelEncuestaClientes By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static RelEncuestaClientesEntity GetOne(int? IdProceso)
        {
            RelEncuestaClientesEntity result = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientesById(IdProceso);

            if (result.IdEncuesta != null)
                result.Encuesta = ProviderSoftv.Encuesta.GetEncuestaById(result.IdEncuesta);

            if (result.Contrato != null)
                result.CLIENTE = ProviderSoftv.CLIENTE.GetCLIENTEById(result.Contrato);

            if (result.IdProceso != null)
                result.RelEnProcesos = ProviderSoftv.RelEnProcesos.GetRelEnProcesosById(result.IdProceso);

            return result;
        }

        /// <summary>
        ///Get RelEncuestaClientes By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static RelEncuestaClientesEntity GetOneDeep(int? IdProceso)
        {
            RelEncuestaClientesEntity result = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientesById(IdProceso);

            if (result.IdEncuesta != null)
                result.Encuesta = ProviderSoftv.Encuesta.GetEncuestaById(result.IdEncuesta);

            if (result.Contrato != null)
                result.CLIENTE = ProviderSoftv.CLIENTE.GetCLIENTEById(result.Contrato);

            if (result.IdProceso != null)
                result.RelEnProcesos = ProviderSoftv.RelEnProcesos.GetRelEnProcesosById(result.IdProceso);

            return result;
        }

        public static List<RelEncuestaClientesEntity> GetRelEncuestaClientesByIdEncuesta(int? IdEncuesta)
        {
            List<RelEncuestaClientesEntity> entities = new List<RelEncuestaClientesEntity>();
            entities = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientesByIdEncuesta(IdEncuesta);
            return entities ?? new List<RelEncuestaClientesEntity>();
        }

        public static List<RelEncuestaClientesEntity> GetRelEncuestaClientesByCONTRATO(long? Contrato)
        {
            List<RelEncuestaClientesEntity> entities = new List<RelEncuestaClientesEntity>();
            entities = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientesByCONTRATO(Contrato);
            return entities ?? new List<RelEncuestaClientesEntity>();
        }

        public static List<RelEncuestaClientesEntity> GetRelEncuestaClientesByIdProceso(int? IdProceso)
        {
            List<RelEncuestaClientesEntity> entities = new List<RelEncuestaClientesEntity>();
            entities = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientesByIdProceso(IdProceso);
            return entities ?? new List<RelEncuestaClientesEntity>();
        }



        /// <summary>
        ///Get RelEncuestaClientes
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<RelEncuestaClientesEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<RelEncuestaClientesEntity> entities = new SoftvList<RelEncuestaClientesEntity>();
            entities = ProviderSoftv.RelEncuestaClientes.GetPagedList(pageIndex, pageSize);

            List<EncuestaEntity> lEncuesta = ProviderSoftv.Encuesta.GetEncuesta(entities.Where(x => x.IdEncuesta.HasValue).Select(x => x.IdEncuesta.Value).Distinct().ToList());
            lEncuesta.ForEach(XEncuesta => entities.Where(x => x.IdEncuesta.HasValue).Where(x => x.IdEncuesta == XEncuesta.IdEncuesta).ToList().ForEach(y => y.Encuesta = XEncuesta));

            List<CLIENTEEntity> lCLIENTE = ProviderSoftv.CLIENTE.GetCLIENTE(entities.Where(x => x.Contrato.HasValue).Select(x => x.Contrato.Value).Distinct().ToList());
            lCLIENTE.ForEach(XCLIENTE => entities.Where(x => x.Contrato.HasValue).Where(x => x.Contrato == XCLIENTE.CONTRATO).ToList().ForEach(y => y.CLIENTE = XCLIENTE));

            List<RelEnProcesosEntity> lRelEnProcesos = ProviderSoftv.RelEnProcesos.GetRelEnProcesos(entities.Where(x => x.IdProceso.HasValue).Select(x => x.IdProceso.Value).Distinct().ToList());
            lRelEnProcesos.ForEach(XRelEnProcesos => entities.Where(x => x.IdProceso.HasValue).Where(x => x.IdProceso == XRelEnProcesos.IdProceso).ToList().ForEach(y => y.RelEnProcesos = XRelEnProcesos));

            return entities ?? new SoftvList<RelEncuestaClientesEntity>();
        }

        /// <summary>
        ///Get RelEncuestaClientes
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<RelEncuestaClientesEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<RelEncuestaClientesEntity> entities = new SoftvList<RelEncuestaClientesEntity>();
            entities = ProviderSoftv.RelEncuestaClientes.GetPagedList(pageIndex, pageSize, xml);

            List<EncuestaEntity> lEncuesta = ProviderSoftv.Encuesta.GetEncuesta(entities.Where(x => x.IdEncuesta.HasValue).Select(x => x.IdEncuesta.Value).Distinct().ToList());
            lEncuesta.ForEach(XEncuesta => entities.Where(x => x.IdEncuesta.HasValue).Where(x => x.IdEncuesta == XEncuesta.IdEncuesta).ToList().ForEach(y => y.Encuesta = XEncuesta));

            List<CLIENTEEntity> lCLIENTE = ProviderSoftv.CLIENTE.GetCLIENTE(entities.Where(x => x.Contrato.HasValue).Select(x => x.Contrato.Value).Distinct().ToList());
            lCLIENTE.ForEach(XCLIENTE => entities.Where(x => x.Contrato.HasValue).Where(x => x.Contrato == XCLIENTE.CONTRATO).ToList().ForEach(y => y.CLIENTE = XCLIENTE));

            List<RelEnProcesosEntity> lRelEnProcesos = ProviderSoftv.RelEnProcesos.GetRelEnProcesos(entities.Where(x => x.IdProceso.HasValue).Select(x => x.IdProceso.Value).Distinct().ToList());
            lRelEnProcesos.ForEach(XRelEnProcesos => entities.Where(x => x.IdProceso.HasValue).Where(x => x.IdProceso == XRelEnProcesos.IdProceso).ToList().ForEach(y => y.RelEnProcesos = XRelEnProcesos));

            return entities ?? new SoftvList<RelEncuestaClientesEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
