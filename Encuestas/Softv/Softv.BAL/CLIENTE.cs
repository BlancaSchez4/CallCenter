
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : CLIENTEBussines
/// File                    : CLIENTEBussines.cs
/// Creation date           : 02/05/2016
/// Creation time           : 06:30 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class CLIENTE
    {

        #region Constructors
        public CLIENTE() { }
        #endregion

        /// <summary>
        ///Adds CLIENTE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(CLIENTEEntity objCLIENTE)
        {
            int result = ProviderSoftv.CLIENTE.AddCLIENTE(objCLIENTE);
            return result;
        }

        /// <summary>
        ///Delete CLIENTE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(long? CONTRATO)
        {
            int resultado = ProviderSoftv.CLIENTE.DeleteCLIENTE(CONTRATO);
            return resultado;
        }

        /// <summary>
        ///Update CLIENTE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(CLIENTEEntity objCLIENTE)
        {
            int result = ProviderSoftv.CLIENTE.EditCLIENTE(objCLIENTE);
            return result;
        }

        /// <summary>
        ///Get CLIENTE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<CLIENTEEntity> GetAll()
        {
            List<CLIENTEEntity> entities = new List<CLIENTEEntity>();
            entities = ProviderSoftv.CLIENTE.GetCLIENTE();

            //List<RelEncuestaClientesEntity> lRelEncuestaClientes = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientes(entities.Where(x => x.CONTRATO.HasValue).Select(x => x.CONTRATO.Value).ToList());
            //lRelEncuestaClientes.ForEach(XRelEncuestaClientes => entities.Where(x => x.CONTRATO.HasValue).Where(x => x.CONTRATO == XRelEncuestaClientes.Contrato).ToList().ForEach(y => y.RelEncuestaClientes = XRelEncuestaClientes));

            return entities ?? new List<CLIENTEEntity>();
        }

        /// <summary>
        ///Get CLIENTE List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<CLIENTEEntity> GetAll(List<long> lid)
        {
            List<CLIENTEEntity> entities = new List<CLIENTEEntity>();
            entities = ProviderSoftv.CLIENTE.GetCLIENTE(lid);
            return entities ?? new List<CLIENTEEntity>();
        }

        /// <summary>
        ///Get CLIENTE By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static CLIENTEEntity GetOne(long? CONTRATO)
        {
            CLIENTEEntity result = ProviderSoftv.CLIENTE.GetCLIENTEById(CONTRATO);

            //if (result.CONTRATO != null)
            //    result.RelEncuestaClientes = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientesById(result.CONTRATO);

            return result;
        }

        /// <summary>
        ///Get CLIENTE By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static CLIENTEEntity GetOneDeep(long? CONTRATO)
        {
            CLIENTEEntity result = ProviderSoftv.CLIENTE.GetCLIENTEById(CONTRATO);

            //if (result.CONTRATO != null)
            //    result.RelEncuestaClientes = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientesById(result.CONTRATO);

            return result;
        }

        public static List<CLIENTEEntity> GetCLIENTEByContrato(long? CONTRATO)
        {
            List<CLIENTEEntity> entities = new List<CLIENTEEntity>();
            entities = ProviderSoftv.CLIENTE.GetCLIENTEByContrato(CONTRATO);
            return entities ?? new List<CLIENTEEntity>();
        }



        /// <summary>
        ///Get CLIENTE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<CLIENTEEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<CLIENTEEntity> entities = new SoftvList<CLIENTEEntity>();
            entities = ProviderSoftv.CLIENTE.GetPagedList(pageIndex, pageSize);

            //List<RelEncuestaClientesEntity> lRelEncuestaClientes = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientes(entities.Where(x => x.Contrato.HasValue).Select(x => x.Contrato.Value).Distinct().ToList());
            //lRelEncuestaClientes.ForEach(XRelEncuestaClientes => entities.Where(x => x.Contrato.HasValue).Where(x => x.Contrato == XRelEncuestaClientes.Contrato).ToList().ForEach(y => y.RelEncuestaClientes = XRelEncuestaClientes));

            return entities ?? new SoftvList<CLIENTEEntity>();
        }

        /// <summary>
        ///Get CLIENTE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<CLIENTEEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<CLIENTEEntity> entities = new SoftvList<CLIENTEEntity>();
            entities = ProviderSoftv.CLIENTE.GetPagedList(pageIndex, pageSize, xml);

            //List<RelEncuestaClientesEntity> lRelEncuestaClientes = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientes(entities.Where(x => x.Contrato.HasValue).Select(x => x.Contrato.Value).Distinct().ToList());
            //lRelEncuestaClientes.ForEach(XRelEncuestaClientes => entities.Where(x => x.Contrato.HasValue).Where(x => x.Contrato == XRelEncuestaClientes.Contrato).ToList().ForEach(y => y.RelEncuestaClientes = XRelEncuestaClientes));

            return entities ?? new SoftvList<CLIENTEEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
