
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : ResOpcMultsBussines
/// File                    : ResOpcMultsBussines.cs
/// Creation date           : 27/04/2016
/// Creation time           : 05:17 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class ResOpcMults
    {

        #region Constructors
        public ResOpcMults() { }
        #endregion

        /// <summary>
        ///Adds ResOpcMults
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(ResOpcMultsEntity objResOpcMults)
        {
            int result = ProviderSoftv.ResOpcMults.AddResOpcMults(objResOpcMults);
            return result;
        }

        /// <summary>
        ///Delete ResOpcMults
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? Id_ResOpcMult)
        {
            int resultado = ProviderSoftv.ResOpcMults.DeleteResOpcMults(Id_ResOpcMult);
            return resultado;
        }

        /// <summary>
        ///Update ResOpcMults
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(ResOpcMultsEntity objResOpcMults)
        {
            int result = ProviderSoftv.ResOpcMults.EditResOpcMults(objResOpcMults);
            return result;
        }

        /// <summary>
        ///Get ResOpcMults
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<ResOpcMultsEntity> GetAll()
        {
            List<ResOpcMultsEntity> entities = new List<ResOpcMultsEntity>();
            entities = ProviderSoftv.ResOpcMults.GetResOpcMults();

            List<RelPreguntaOpcMultsEntity> lRelPreguntaOpcMults = ProviderSoftv.RelPreguntaOpcMults.GetRelPreguntaOpcMults(entities.Where(x => x.Id_ResOpcMult.HasValue).Select(x => x.Id_ResOpcMult.Value).ToList());
            lRelPreguntaOpcMults.ForEach(XRelPreguntaOpcMults => entities.Where(x => x.Id_ResOpcMult.HasValue).Where(x => x.Id_ResOpcMult == XRelPreguntaOpcMults.Id_ResOpcMult).ToList().ForEach(y => y.RelPreguntaOpcMults = XRelPreguntaOpcMults));

            List<RelEnProcesosEntity> lRelEnProcesos = ProviderSoftv.RelEnProcesos.GetRelEnProcesos(entities.Where(x => x.Id_ResOpcMult.HasValue).Select(x => x.Id_ResOpcMult.Value).ToList());
            lRelEnProcesos.ForEach(XRelEnProcesos => entities.Where(x => x.Id_ResOpcMult.HasValue).Where(x => x.Id_ResOpcMult == XRelEnProcesos.Id_ResOpcMult).ToList().ForEach(y => y.RelEnProcesos = XRelEnProcesos));

            return entities ?? new List<ResOpcMultsEntity>();
        }

        /// <summary>
        ///Get ResOpcMults List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<ResOpcMultsEntity> GetAll(List<int> lid)
        {
            List<ResOpcMultsEntity> entities = new List<ResOpcMultsEntity>();
            entities = ProviderSoftv.ResOpcMults.GetResOpcMults(lid);
            return entities ?? new List<ResOpcMultsEntity>();
        }

        /// <summary>
        ///Get ResOpcMults By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static ResOpcMultsEntity GetOne(int? Id_ResOpcMult)
        {
            ResOpcMultsEntity result = ProviderSoftv.ResOpcMults.GetResOpcMultsById(Id_ResOpcMult);

            if (result.Id_ResOpcMult != null)
                result.RelPreguntaOpcMults = ProviderSoftv.RelPreguntaOpcMults.GetRelPreguntaOpcMultsById(result.Id_ResOpcMult);

            if (result.Id_ResOpcMult != null)
                result.RelEnProcesos = ProviderSoftv.RelEnProcesos.GetRelEnProcesosById(result.Id_ResOpcMult);

            return result;
        }

        /// <summary>
        ///Get ResOpcMults By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static ResOpcMultsEntity GetOneDeep(int? Id_ResOpcMult)
        {
            ResOpcMultsEntity result = ProviderSoftv.ResOpcMults.GetResOpcMultsById(Id_ResOpcMult);

            if (result.Id_ResOpcMult != null)
                result.RelPreguntaOpcMults = ProviderSoftv.RelPreguntaOpcMults.GetRelPreguntaOpcMultsById(result.Id_ResOpcMult);

            if (result.Id_ResOpcMult != null)
                result.RelEnProcesos = ProviderSoftv.RelEnProcesos.GetRelEnProcesosById(result.Id_ResOpcMult);

            return result;
        }

        public static List<ResOpcMultsEntity> GetResOpcMultsById_ResOpcMult(int? Id_ResOpcMult)
        {
            List<ResOpcMultsEntity> entities = new List<ResOpcMultsEntity>();
            entities = ProviderSoftv.ResOpcMults.GetResOpcMultsById_ResOpcMult(Id_ResOpcMult);
            return entities ?? new List<ResOpcMultsEntity>();
        }




        /// <summary>
        ///Get ResOpcMults
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<ResOpcMultsEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<ResOpcMultsEntity> entities = new SoftvList<ResOpcMultsEntity>();
            entities = ProviderSoftv.ResOpcMults.GetPagedList(pageIndex, pageSize);

            List<RelPreguntaOpcMultsEntity> lRelPreguntaOpcMults = ProviderSoftv.RelPreguntaOpcMults.GetRelPreguntaOpcMults(entities.Where(x => x.Id_ResOpcMult.HasValue).Select(x => x.Id_ResOpcMult.Value).Distinct().ToList());
            lRelPreguntaOpcMults.ForEach(XRelPreguntaOpcMults => entities.Where(x => x.Id_ResOpcMult.HasValue).Where(x => x.Id_ResOpcMult == XRelPreguntaOpcMults.Id_ResOpcMult).ToList().ForEach(y => y.RelPreguntaOpcMults = XRelPreguntaOpcMults));

            List<RelEnProcesosEntity> lRelEnProcesos = ProviderSoftv.RelEnProcesos.GetRelEnProcesos(entities.Where(x => x.Id_ResOpcMult.HasValue).Select(x => x.Id_ResOpcMult.Value).Distinct().ToList());
            lRelEnProcesos.ForEach(XRelEnProcesos => entities.Where(x => x.Id_ResOpcMult.HasValue).Where(x => x.Id_ResOpcMult == XRelEnProcesos.Id_ResOpcMult).ToList().ForEach(y => y.RelEnProcesos = XRelEnProcesos));

            return entities ?? new SoftvList<ResOpcMultsEntity>();
        }

        /// <summary>
        ///Get ResOpcMults
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<ResOpcMultsEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<ResOpcMultsEntity> entities = new SoftvList<ResOpcMultsEntity>();
            entities = ProviderSoftv.ResOpcMults.GetPagedList(pageIndex, pageSize, xml);

            List<RelPreguntaOpcMultsEntity> lRelPreguntaOpcMults = ProviderSoftv.RelPreguntaOpcMults.GetRelPreguntaOpcMults(entities.Where(x => x.Id_ResOpcMult.HasValue).Select(x => x.Id_ResOpcMult.Value).Distinct().ToList());
            lRelPreguntaOpcMults.ForEach(XRelPreguntaOpcMults => entities.Where(x => x.Id_ResOpcMult.HasValue).Where(x => x.Id_ResOpcMult == XRelPreguntaOpcMults.Id_ResOpcMult).ToList().ForEach(y => y.RelPreguntaOpcMults = XRelPreguntaOpcMults));

            List<RelEnProcesosEntity> lRelEnProcesos = ProviderSoftv.RelEnProcesos.GetRelEnProcesos(entities.Where(x => x.Id_ResOpcMult.HasValue).Select(x => x.Id_ResOpcMult.Value).Distinct().ToList());
            lRelEnProcesos.ForEach(XRelEnProcesos => entities.Where(x => x.Id_ResOpcMult.HasValue).Where(x => x.Id_ResOpcMult == XRelEnProcesos.Id_ResOpcMult).ToList().ForEach(y => y.RelEnProcesos = XRelEnProcesos));

            return entities ?? new SoftvList<ResOpcMultsEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
