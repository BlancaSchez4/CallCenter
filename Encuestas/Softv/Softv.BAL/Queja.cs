
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : QuejaBussines
/// File                    : QuejaBussines.cs
/// Creation date           : 20/05/2016
/// Creation time           : 06:37 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class Queja
    {

        #region Constructors
        public Queja() { }
        #endregion

        /// <summary>
        ///Adds Queja
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(QuejaEntity objQueja)
        {
            int result = ProviderSoftv.Queja.AddQueja(objQueja);
            return result;
        }

        /// <summary>
        ///Delete Queja
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(long? Clv_Queja)
        {
            int resultado = ProviderSoftv.Queja.DeleteQueja(Clv_Queja);
            return resultado;
        }

        /// <summary>
        ///Update Queja
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(QuejaEntity objQueja)
        {
            int result = ProviderSoftv.Queja.EditQueja(objQueja);
            return result;
        }

        /// <summary>
        ///Get Queja
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<QuejaEntity> GetAll()
        {
            List<QuejaEntity> entities = new List<QuejaEntity>();
            entities = ProviderSoftv.Queja.GetQueja();

            //List<LlamadaEntity> lLlamada = ProviderSoftv.Llamada.GetLlamada(entities.Where(x => x.Clv_Queja.HasValue).Select(x => x.Clv_Queja.Value).ToList());
            //lLlamada.ForEach(XLlamada => entities.Where(x => x.Clv_Queja.HasValue).Where(x => x.Clv_Queja == XLlamada.Clv_Queja).ToList().ForEach(y => y.Llamada = XLlamada));

            return entities ?? new List<QuejaEntity>();
        }

        /// <summary>
        ///Get Queja List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<QuejaEntity> GetAll(List<long> lid)
        {
            List<QuejaEntity> entities = new List<QuejaEntity>();
            entities = ProviderSoftv.Queja.GetQueja(lid);
            return entities ?? new List<QuejaEntity>();
        }

        /// <summary>
        ///Get Queja By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static QuejaEntity GetOne(long? Clv_Queja)
        {
            QuejaEntity result = ProviderSoftv.Queja.GetQuejaById(Clv_Queja);

            //if (result.Clv_Queja != null)
            //    result.Llamada = ProviderSoftv.Llamada.GetLlamadaById(result.Clv_Queja);

            return result;
        }

        /// <summary>
        ///Get Queja By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static QuejaEntity GetOneDeep(long? Clv_Queja)
        {
            QuejaEntity result = ProviderSoftv.Queja.GetQuejaById(Clv_Queja);

            //if (result.Clv_Queja != null)
            //    result.Llamada = ProviderSoftv.Llamada.GetLlamadaById(result.Clv_Queja);

            return result;
        }

        public static List<QuejaEntity> GetQuejaByClv_Queja(long? Clv_Queja)
        {
            List<QuejaEntity> entities = new List<QuejaEntity>();
            entities = ProviderSoftv.Queja.GetQuejaByClv_Queja(Clv_Queja);
            return entities ?? new List<QuejaEntity>();
        }



        /// <summary>
        ///Get Queja
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<QuejaEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<QuejaEntity> entities = new SoftvList<QuejaEntity>();
            entities = ProviderSoftv.Queja.GetPagedList(pageIndex, pageSize);

            //List<LlamadaEntity> lLlamada = ProviderSoftv.Llamada.GetLlamada(entities.Where(x => x.Clv_Queja.HasValue).Select(x => x.Clv_Queja.Value).Distinct().ToList());
            //lLlamada.ForEach(XLlamada => entities.Where(x => x.Clv_Queja.HasValue).Where(x => x.Clv_Queja == XLlamada.Clv_Queja).ToList().ForEach(y => y.Llamada = XLlamada));

            return entities ?? new SoftvList<QuejaEntity>();
        }

        /// <summary>
        ///Get Queja
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<QuejaEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<QuejaEntity> entities = new SoftvList<QuejaEntity>();
            entities = ProviderSoftv.Queja.GetPagedList(pageIndex, pageSize, xml);

            //List<LlamadaEntity> lLlamada = ProviderSoftv.Llamada.GetLlamada(entities.Where(x => x.Clv_Queja.HasValue).Select(x => x.Clv_Queja.Value).Distinct().ToList());
            //lLlamada.ForEach(XLlamada => entities.Where(x => x.Clv_Queja.HasValue).Where(x => x.Clv_Queja == XLlamada.Clv_Queja).ToList().ForEach(y => y.Llamada = XLlamada));

            return entities ?? new SoftvList<QuejaEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
