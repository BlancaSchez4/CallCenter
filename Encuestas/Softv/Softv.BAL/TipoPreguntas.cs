
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : TipoPreguntasBussines
/// File                    : TipoPreguntasBussines.cs
/// Creation date           : 27/04/2016
/// Creation time           : 05:15 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class TipoPreguntas
    {

        #region Constructors
        public TipoPreguntas() { }
        #endregion

        /// <summary>
        ///Adds TipoPreguntas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(TipoPreguntasEntity objTipoPreguntas)
        {
            int result = ProviderSoftv.TipoPreguntas.AddTipoPreguntas(objTipoPreguntas);
            return result;
        }

        /// <summary>
        ///Delete TipoPreguntas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? IdTipoPregunta)
        {
            int resultado = ProviderSoftv.TipoPreguntas.DeleteTipoPreguntas(IdTipoPregunta);
            return resultado;
        }

        /// <summary>
        ///Update TipoPreguntas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(TipoPreguntasEntity objTipoPreguntas)
        {
            int result = ProviderSoftv.TipoPreguntas.EditTipoPreguntas(objTipoPreguntas);
            return result;
        }

        /// <summary>
        ///Get TipoPreguntas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TipoPreguntasEntity> GetAll()
        {
            List<TipoPreguntasEntity> entities = new List<TipoPreguntasEntity>();
            entities = ProviderSoftv.TipoPreguntas.GetTipoPreguntas();

            List<PreguntaEntity> lPregunta = ProviderSoftv.Pregunta.GetPregunta(entities.Where(x => x.IdTipoPregunta.HasValue).Select(x => x.IdTipoPregunta.Value).ToList());
            lPregunta.ForEach(XPregunta => entities.Where(x => x.IdTipoPregunta.HasValue).Where(x => x.IdTipoPregunta == XPregunta.IdTipoPregunta).ToList().ForEach(y => y.Pregunta = XPregunta));

            return entities ?? new List<TipoPreguntasEntity>();
        }

        /// <summary>
        ///Get TipoPreguntas List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TipoPreguntasEntity> GetAll(List<int> lid)
        {
            List<TipoPreguntasEntity> entities = new List<TipoPreguntasEntity>();
            entities = ProviderSoftv.TipoPreguntas.GetTipoPreguntas(lid);
            return entities ?? new List<TipoPreguntasEntity>();
        }

        /// <summary>
        ///Get TipoPreguntas By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static TipoPreguntasEntity GetOne(int? IdTipoPregunta)
        {
            TipoPreguntasEntity result = ProviderSoftv.TipoPreguntas.GetTipoPreguntasById(IdTipoPregunta);

            if (result.IdTipoPregunta != null)
                result.Pregunta = ProviderSoftv.Pregunta.GetPreguntaById(result.IdTipoPregunta);

            return result;
        }

        /// <summary>
        ///Get TipoPreguntas By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static TipoPreguntasEntity GetOneDeep(int? IdTipoPregunta)
        {
            TipoPreguntasEntity result = ProviderSoftv.TipoPreguntas.GetTipoPreguntasById(IdTipoPregunta);

            if (result.IdTipoPregunta != null)
                result.Pregunta = ProviderSoftv.Pregunta.GetPreguntaById(result.IdTipoPregunta);

            return result;
        }

        public static List<TipoPreguntasEntity> GetTipoPreguntasByIdTipoPregunta(int? IdTipoPregunta)
        {
            List<TipoPreguntasEntity> entities = new List<TipoPreguntasEntity>();
            entities = ProviderSoftv.TipoPreguntas.GetTipoPreguntasByIdTipoPregunta(IdTipoPregunta);
            return entities ?? new List<TipoPreguntasEntity>();
        }



        /// <summary>
        ///Get TipoPreguntas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<TipoPreguntasEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<TipoPreguntasEntity> entities = new SoftvList<TipoPreguntasEntity>();
            entities = ProviderSoftv.TipoPreguntas.GetPagedList(pageIndex, pageSize);

            List<PreguntaEntity> lPregunta = ProviderSoftv.Pregunta.GetPregunta(entities.Where(x => x.IdTipoPregunta.HasValue).Select(x => x.IdTipoPregunta.Value).Distinct().ToList());
            lPregunta.ForEach(XPregunta => entities.Where(x => x.IdTipoPregunta.HasValue).Where(x => x.IdTipoPregunta == XPregunta.IdTipoPregunta).ToList().ForEach(y => y.Pregunta = XPregunta));

            return entities ?? new SoftvList<TipoPreguntasEntity>();
        }

        /// <summary>
        ///Get TipoPreguntas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<TipoPreguntasEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<TipoPreguntasEntity> entities = new SoftvList<TipoPreguntasEntity>();
            entities = ProviderSoftv.TipoPreguntas.GetPagedList(pageIndex, pageSize, xml);

            List<PreguntaEntity> lPregunta = ProviderSoftv.Pregunta.GetPregunta(entities.Where(x => x.IdTipoPregunta.HasValue).Select(x => x.IdTipoPregunta.Value).Distinct().ToList());
            lPregunta.ForEach(XPregunta => entities.Where(x => x.IdTipoPregunta.HasValue).Where(x => x.IdTipoPregunta == XPregunta.IdTipoPregunta).ToList().ForEach(y => y.Pregunta = XPregunta));

            return entities ?? new SoftvList<TipoPreguntasEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
