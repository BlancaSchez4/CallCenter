
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : CVECAROLBussines
/// File                    : CVECAROLBussines.cs
/// Creation date           : 20/05/2016
/// Creation time           : 06:39 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class CVECAROL
    {

        #region Constructors
        public CVECAROL() { }
        #endregion

        /// <summary>
        ///Adds CVECAROL
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(CVECAROLEntity objCVECAROL)
        {
            int result = ProviderSoftv.CVECAROL.AddCVECAROL(objCVECAROL);
            return result;
        }

        /// <summary>
        ///Delete CVECAROL
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? Clv_Colonia)
        {
            int resultado = ProviderSoftv.CVECAROL.DeleteCVECAROL(Clv_Colonia);
            return resultado;
        }

        /// <summary>
        ///Update CVECAROL
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(CVECAROLEntity objCVECAROL)
        {
            int result = ProviderSoftv.CVECAROL.EditCVECAROL(objCVECAROL);
            return result;
        }

        /// <summary>
        ///Get CVECAROL
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<CVECAROLEntity> GetAll()
        {
            List<CVECAROLEntity> entities = new List<CVECAROLEntity>();
            entities = ProviderSoftv.CVECAROL.GetCVECAROL();

            List<CALLEEntity> lCALLES = ProviderSoftv.CALLE.GetCALLE(entities.Where(x => x.Clv_Calle.HasValue).Select(x => x.Clv_Calle.Value).ToList());
            lCALLES.ForEach(XCALLES => entities.Where(x => x.Clv_Calle.HasValue).Where(x => x.Clv_Calle == XCALLES.Clv_Calle).ToList().ForEach(y => y.CALLES = XCALLES));

            List<COLONIAEntity> lCOLONIA = ProviderSoftv.COLONIA.GetCOLONIA(entities.Where(x => x.Clv_Colonia.HasValue).Select(x => x.Clv_Colonia.Value).ToList());
            lCOLONIA.ForEach(XCOLONIA => entities.Where(x => x.Clv_Colonia.HasValue).Where(x => x.Clv_Colonia == XCOLONIA.Clv_Colonia).ToList().ForEach(y => y.COLONIA = XCOLONIA));

            return entities ?? new List<CVECAROLEntity>();
        }

        /// <summary>
        ///Get CVECAROL List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<CVECAROLEntity> GetAll(List<int> lid)
        {
            List<CVECAROLEntity> entities = new List<CVECAROLEntity>();
            entities = ProviderSoftv.CVECAROL.GetCVECAROL(lid);
            return entities ?? new List<CVECAROLEntity>();
        }

        /// <summary>
        ///Get CVECAROL By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static CVECAROLEntity GetOne(int? Clv_Colonia)
        {
            CVECAROLEntity result = ProviderSoftv.CVECAROL.GetCVECAROLById(Clv_Colonia);

            if (result.Clv_Calle != null)
                result.CALLES = ProviderSoftv.CALLE.GetCALLEById(result.Clv_Calle);

            if (result.Clv_Colonia != null)
                result.COLONIA = ProviderSoftv.COLONIA.GetCOLONIAById(result.Clv_Colonia);

            return result;
        }

        /// <summary>
        ///Get CVECAROL By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static CVECAROLEntity GetOneDeep(int? Clv_Calle, int? Clv_Colonia)
        {
            CVECAROLEntity result = ProviderSoftv.CVECAROL.GetCVECAROLById(Clv_Colonia);

            if (result.Clv_Calle != null)
                result.CALLES = ProviderSoftv.CALLE.GetCALLEById(result.Clv_Calle);

            if (result.Clv_Colonia != null)
                result.COLONIA = ProviderSoftv.COLONIA.GetCOLONIAById(result.Clv_Colonia);

            return result;
        }

        public static List<CVECAROLEntity> GetCVECAROLByClv_Calle(int? Clv_Calle)
        {
            List<CVECAROLEntity> entities = new List<CVECAROLEntity>();
            entities = ProviderSoftv.CVECAROL.GetCVECAROLByClv_Calle(Clv_Calle);
            return entities ?? new List<CVECAROLEntity>();
        }

        public static List<CVECAROLEntity> GetCVECAROLByClv_Colonia(int? Clv_Colonia)
        {
            List<CVECAROLEntity> entities = new List<CVECAROLEntity>();
            entities = ProviderSoftv.CVECAROL.GetCVECAROLByClv_Colonia(Clv_Colonia);
            return entities ?? new List<CVECAROLEntity>();
        }



        /// <summary>
        ///Get CVECAROL
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<CVECAROLEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<CVECAROLEntity> entities = new SoftvList<CVECAROLEntity>();
            entities = ProviderSoftv.CVECAROL.GetPagedList(pageIndex, pageSize);

            List<CALLEEntity> lCALLES = ProviderSoftv.CALLE.GetCALLE(entities.Where(x => x.Clv_Calle.HasValue).Select(x => x.Clv_Calle.Value).Distinct().ToList());
            lCALLES.ForEach(XCALLES => entities.Where(x => x.Clv_Calle.HasValue).Where(x => x.Clv_Calle == XCALLES.Clv_Calle).ToList().ForEach(y => y.CALLES = XCALLES));

            List<COLONIAEntity> lCOLONIA = ProviderSoftv.COLONIA.GetCOLONIA(entities.Where(x => x.Clv_Colonia.HasValue).Select(x => x.Clv_Colonia.Value).Distinct().ToList());
            lCOLONIA.ForEach(XCOLONIA => entities.Where(x => x.Clv_Colonia.HasValue).Where(x => x.Clv_Colonia == XCOLONIA.Clv_Colonia).ToList().ForEach(y => y.COLONIA = XCOLONIA));

            return entities ?? new SoftvList<CVECAROLEntity>();
        }

        /// <summary>
        ///Get CVECAROL
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<CVECAROLEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<CVECAROLEntity> entities = new SoftvList<CVECAROLEntity>();
            entities = ProviderSoftv.CVECAROL.GetPagedList(pageIndex, pageSize, xml);

            List<CALLEEntity> lCALLES = ProviderSoftv.CALLE.GetCALLE(entities.Where(x => x.Clv_Calle.HasValue).Select(x => x.Clv_Calle.Value).Distinct().ToList());
            lCALLES.ForEach(XCALLES => entities.Where(x => x.Clv_Calle.HasValue).Where(x => x.Clv_Calle == XCALLES.Clv_Calle).ToList().ForEach(y => y.CALLES = XCALLES));

            List<COLONIAEntity> lCOLONIA = ProviderSoftv.COLONIA.GetCOLONIA(entities.Where(x => x.Clv_Colonia.HasValue).Select(x => x.Clv_Colonia.Value).Distinct().ToList());
            lCOLONIA.ForEach(XCOLONIA => entities.Where(x => x.Clv_Colonia.HasValue).Where(x => x.Clv_Colonia == XCOLONIA.Clv_Colonia).ToList().ForEach(y => y.COLONIA = XCOLONIA));

            return entities ?? new SoftvList<CVECAROLEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
