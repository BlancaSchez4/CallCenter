
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : TipoClienteBussines
/// File                    : TipoClienteBussines.cs
/// Creation date           : 04/05/2016
/// Creation time           : 01:29 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class TipoCliente
    {

        #region Constructors
        public TipoCliente() { }
        #endregion

        /// <summary>
        ///Adds TipoCliente
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(TipoClienteEntity objTipoCliente)
        {
            int result = ProviderSoftv.TipoCliente.AddTipoCliente(objTipoCliente);
            return result;
        }

        /// <summary>
        ///Delete TipoCliente
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? Clv_TipoCliente)
        {
            int resultado = ProviderSoftv.TipoCliente.DeleteTipoCliente(Clv_TipoCliente);
            return resultado;
        }

        /// <summary>
        ///Update TipoCliente
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(TipoClienteEntity objTipoCliente)
        {
            int result = ProviderSoftv.TipoCliente.EditTipoCliente(objTipoCliente);
            return result;
        }

        /// <summary>
        ///Get TipoCliente
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TipoClienteEntity> GetAll()
        {
            List<TipoClienteEntity> entities = new List<TipoClienteEntity>();
            entities = ProviderSoftv.TipoCliente.GetTipoCliente();

            List<Rel_Clientes_TiposClientesEntity> lRel_Clientes_TiposClientes = ProviderSoftv.Rel_Clientes_TiposClientes.GetRel_Clientes_TiposClientes(entities.Where(x => x.Clv_TipoCliente.HasValue).Select(x => x.Clv_TipoCliente.Value).ToList());
            lRel_Clientes_TiposClientes.ForEach(XRel_Clientes_TiposClientes => entities.Where(x => x.Clv_TipoCliente.HasValue).Where(x => x.Clv_TipoCliente == XRel_Clientes_TiposClientes.Clv_TipoCliente).ToList().ForEach(y => y.Rel_Clientes_TiposClientes = XRel_Clientes_TiposClientes));

            return entities ?? new List<TipoClienteEntity>();
        }

        /// <summary>
        ///Get TipoCliente List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<TipoClienteEntity> GetAll(List<int> lid)
        {
            List<TipoClienteEntity> entities = new List<TipoClienteEntity>();
            entities = ProviderSoftv.TipoCliente.GetTipoCliente(lid);
            return entities ?? new List<TipoClienteEntity>();
        }

        /// <summary>
        ///Get TipoCliente By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static TipoClienteEntity GetOne(int? Clv_TipoCliente)
        {
            TipoClienteEntity result = ProviderSoftv.TipoCliente.GetTipoClienteById(Clv_TipoCliente);

            if (result.Clv_TipoCliente != null)
                result.Rel_Clientes_TiposClientes = ProviderSoftv.Rel_Clientes_TiposClientes.GetRel_Clientes_TiposClientesById(result.Clv_TipoCliente);

            return result;
        }

        /// <summary>
        ///Get TipoCliente By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static TipoClienteEntity GetOneDeep(int? Clv_TipoCliente)
        {
            TipoClienteEntity result = ProviderSoftv.TipoCliente.GetTipoClienteById(Clv_TipoCliente);

            if (result.Clv_TipoCliente != null)
                result.Rel_Clientes_TiposClientes = ProviderSoftv.Rel_Clientes_TiposClientes.GetRel_Clientes_TiposClientesById(result.Clv_TipoCliente);

            return result;
        }

        public static List<TipoClienteEntity> GetTipoClienteByClv_TipoCliente(int? Clv_TipoCliente)
        {
            List<TipoClienteEntity> entities = new List<TipoClienteEntity>();
            entities = ProviderSoftv.TipoCliente.GetTipoClienteByClv_TipoCliente(Clv_TipoCliente);
            return entities ?? new List<TipoClienteEntity>();
        }



        /// <summary>
        ///Get TipoCliente
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<TipoClienteEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<TipoClienteEntity> entities = new SoftvList<TipoClienteEntity>();
            entities = ProviderSoftv.TipoCliente.GetPagedList(pageIndex, pageSize);

            List<Rel_Clientes_TiposClientesEntity> lRel_Clientes_TiposClientes = ProviderSoftv.Rel_Clientes_TiposClientes.GetRel_Clientes_TiposClientes(entities.Where(x => x.Clv_TipoCliente.HasValue).Select(x => x.Clv_TipoCliente.Value).Distinct().ToList());
            lRel_Clientes_TiposClientes.ForEach(XRel_Clientes_TiposClientes => entities.Where(x => x.Clv_TipoCliente.HasValue).Where(x => x.Clv_TipoCliente == XRel_Clientes_TiposClientes.Clv_TipoCliente).ToList().ForEach(y => y.Rel_Clientes_TiposClientes = XRel_Clientes_TiposClientes));

            return entities ?? new SoftvList<TipoClienteEntity>();
        }

        /// <summary>
        ///Get TipoCliente
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<TipoClienteEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<TipoClienteEntity> entities = new SoftvList<TipoClienteEntity>();
            entities = ProviderSoftv.TipoCliente.GetPagedList(pageIndex, pageSize, xml);

            List<Rel_Clientes_TiposClientesEntity> lRel_Clientes_TiposClientes = ProviderSoftv.Rel_Clientes_TiposClientes.GetRel_Clientes_TiposClientes(entities.Where(x => x.Clv_TipoCliente.HasValue).Select(x => x.Clv_TipoCliente.Value).Distinct().ToList());
            lRel_Clientes_TiposClientes.ForEach(XRel_Clientes_TiposClientes => entities.Where(x => x.Clv_TipoCliente.HasValue).Where(x => x.Clv_TipoCliente == XRel_Clientes_TiposClientes.Clv_TipoCliente).ToList().ForEach(y => y.Rel_Clientes_TiposClientes = XRel_Clientes_TiposClientes));

            return entities ?? new SoftvList<TipoClienteEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
