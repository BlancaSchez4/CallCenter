
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : RelPreguntaEncuestasBussines
/// File                    : RelPreguntaEncuestasBussines.cs
/// Creation date           : 27/04/2016
/// Creation time           : 05:18 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class RelPreguntaEncuestas
    {

        #region Constructors
        public RelPreguntaEncuestas() { }
        #endregion

        /// <summary>
        ///Adds RelPreguntaEncuestas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(RelPreguntaEncuestasEntity objRelPreguntaEncuestas)
        {
            int result = ProviderSoftv.RelPreguntaEncuestas.AddRelPreguntaEncuestas(objRelPreguntaEncuestas);
            return result;
        }

        /// <summary>
        ///Delete RelPreguntaEncuestas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? IdPregunta)
        {
            int resultado = ProviderSoftv.RelPreguntaEncuestas.DeleteRelPreguntaEncuestas(IdPregunta);
            return resultado;
        }

        /// <summary>
        ///Update RelPreguntaEncuestas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(RelPreguntaEncuestasEntity objRelPreguntaEncuestas)
        {
            int result = ProviderSoftv.RelPreguntaEncuestas.EditRelPreguntaEncuestas(objRelPreguntaEncuestas);
            return result;
        }

        /// <summary>
        ///Get RelPreguntaEncuestas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<RelPreguntaEncuestasEntity> GetAll()
        {
            List<RelPreguntaEncuestasEntity> entities = new List<RelPreguntaEncuestasEntity>();
            entities = ProviderSoftv.RelPreguntaEncuestas.GetRelPreguntaEncuestas();

            List<PreguntaEntity> lPregunta = ProviderSoftv.Pregunta.GetPregunta(entities.Where(x => x.IdPregunta.HasValue).Select(x => x.IdPregunta.Value).ToList());
            lPregunta.ForEach(XPregunta => entities.Where(x => x.IdPregunta.HasValue).Where(x => x.IdPregunta == XPregunta.IdPregunta).ToList().ForEach(y => y.Pregunta = XPregunta));

            List<EncuestaEntity> lEncuesta = ProviderSoftv.Encuesta.GetEncuesta(entities.Where(x => x.IdEncuesta.HasValue).Select(x => x.IdEncuesta.Value).ToList());
            lEncuesta.ForEach(XEncuesta => entities.Where(x => x.IdEncuesta.HasValue).Where(x => x.IdEncuesta == XEncuesta.IdEncuesta).ToList().ForEach(y => y.Encuesta = XEncuesta));

            return entities ?? new List<RelPreguntaEncuestasEntity>();
        }

        /// <summary>
        ///Get RelPreguntaEncuestas List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<RelPreguntaEncuestasEntity> GetAll(List<int> lid)
        {
            List<RelPreguntaEncuestasEntity> entities = new List<RelPreguntaEncuestasEntity>();
            entities = ProviderSoftv.RelPreguntaEncuestas.GetRelPreguntaEncuestas(lid);
            return entities ?? new List<RelPreguntaEncuestasEntity>();
        }

        /// <summary>
        ///Get RelPreguntaEncuestas By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static RelPreguntaEncuestasEntity GetOne(int? IdPregunta)
        {
            RelPreguntaEncuestasEntity result = ProviderSoftv.RelPreguntaEncuestas.GetRelPreguntaEncuestasById(IdPregunta);

            if (result.IdPregunta != null)
                result.Pregunta = ProviderSoftv.Pregunta.GetPreguntaById(result.IdPregunta);

            if (result.IdEncuesta != null)
                result.Encuesta = ProviderSoftv.Encuesta.GetEncuestaById(result.IdEncuesta);

            return result;
        }

        /// <summary>
        ///Get RelPreguntaEncuestas By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static RelPreguntaEncuestasEntity GetOneDeep(int? IdPregunta)
        {
            RelPreguntaEncuestasEntity result = ProviderSoftv.RelPreguntaEncuestas.GetRelPreguntaEncuestasById(IdPregunta);

            if (result.IdPregunta != null)
                result.Pregunta = ProviderSoftv.Pregunta.GetPreguntaById(result.IdPregunta);

            if (result.IdEncuesta != null)
                result.Encuesta = ProviderSoftv.Encuesta.GetEncuestaById(result.IdEncuesta);

            return result;
        }

        public static List<RelPreguntaEncuestasEntity> GetRelPreguntaEncuestasByIdPregunta(int? IdPregunta)
        {
            List<RelPreguntaEncuestasEntity> entities = new List<RelPreguntaEncuestasEntity>();
            entities = ProviderSoftv.RelPreguntaEncuestas.GetRelPreguntaEncuestasByIdPregunta(IdPregunta);
            return entities ?? new List<RelPreguntaEncuestasEntity>();
        }

        public static List<RelPreguntaEncuestasEntity> GetRelPreguntaEncuestasByIdEncuesta(int? IdEncuesta)
        {
            List<RelPreguntaEncuestasEntity> entities = new List<RelPreguntaEncuestasEntity>();
            entities = ProviderSoftv.RelPreguntaEncuestas.GetRelPreguntaEncuestasByIdEncuesta(IdEncuesta);
            return entities ?? new List<RelPreguntaEncuestasEntity>();
        }



        /// <summary>
        ///Get RelPreguntaEncuestas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<RelPreguntaEncuestasEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<RelPreguntaEncuestasEntity> entities = new SoftvList<RelPreguntaEncuestasEntity>();
            entities = ProviderSoftv.RelPreguntaEncuestas.GetPagedList(pageIndex, pageSize);

            List<PreguntaEntity> lPregunta = ProviderSoftv.Pregunta.GetPregunta(entities.Where(x => x.IdPregunta.HasValue).Select(x => x.IdPregunta.Value).Distinct().ToList());
            lPregunta.ForEach(XPregunta => entities.Where(x => x.IdPregunta.HasValue).Where(x => x.IdPregunta == XPregunta.IdPregunta).ToList().ForEach(y => y.Pregunta = XPregunta));

            List<EncuestaEntity> lEncuesta = ProviderSoftv.Encuesta.GetEncuesta(entities.Where(x => x.IdEncuesta.HasValue).Select(x => x.IdEncuesta.Value).Distinct().ToList());
            lEncuesta.ForEach(XEncuesta => entities.Where(x => x.IdEncuesta.HasValue).Where(x => x.IdEncuesta == XEncuesta.IdEncuesta).ToList().ForEach(y => y.Encuesta = XEncuesta));

            return entities ?? new SoftvList<RelPreguntaEncuestasEntity>();
        }

        /// <summary>
        ///Get RelPreguntaEncuestas
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<RelPreguntaEncuestasEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<RelPreguntaEncuestasEntity> entities = new SoftvList<RelPreguntaEncuestasEntity>();
            entities = ProviderSoftv.RelPreguntaEncuestas.GetPagedList(pageIndex, pageSize, xml);

            List<PreguntaEntity> lPregunta = ProviderSoftv.Pregunta.GetPregunta(entities.Where(x => x.IdPregunta.HasValue).Select(x => x.IdPregunta.Value).Distinct().ToList());
            lPregunta.ForEach(XPregunta => entities.Where(x => x.IdPregunta.HasValue).Where(x => x.IdPregunta == XPregunta.IdPregunta).ToList().ForEach(y => y.Pregunta = XPregunta));

            List<EncuestaEntity> lEncuesta = ProviderSoftv.Encuesta.GetEncuesta(entities.Where(x => x.IdEncuesta.HasValue).Select(x => x.IdEncuesta.Value).Distinct().ToList());
            lEncuesta.ForEach(XEncuesta => entities.Where(x => x.IdEncuesta.HasValue).Where(x => x.IdEncuesta == XEncuesta.IdEncuesta).ToList().ForEach(y => y.Encuesta = XEncuesta));

            return entities ?? new SoftvList<RelPreguntaEncuestasEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
