
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : RelEnProcesosBussines
/// File                    : RelEnProcesosBussines.cs
/// Creation date           : 27/04/2016
/// Creation time           : 05:19 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class RelEnProcesos
    {

        #region Constructors
        public RelEnProcesos() { }
        #endregion

        /// <summary>
        ///Adds RelEnProcesos
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(RelEnProcesosEntity objRelEnProcesos)
        {
            int result = ProviderSoftv.RelEnProcesos.AddRelEnProcesos(objRelEnProcesos);
            return result;
        }

        /// <summary>
        ///Delete RelEnProcesos
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? IdProceso)
        {
            int resultado = ProviderSoftv.RelEnProcesos.DeleteRelEnProcesos(IdProceso);
            return resultado;
        }

        /// <summary>
        ///Update RelEnProcesos
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(RelEnProcesosEntity objRelEnProcesos)
        {
            int result = ProviderSoftv.RelEnProcesos.EditRelEnProcesos(objRelEnProcesos);
            return result;
        }

        /// <summary>
        ///Get RelEnProcesos
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<RelEnProcesosEntity> GetAll()
        {
            List<RelEnProcesosEntity> entities = new List<RelEnProcesosEntity>();
            entities = ProviderSoftv.RelEnProcesos.GetRelEnProcesos();

            List<PreguntaEntity> lPregunta = ProviderSoftv.Pregunta.GetPregunta(entities.Where(x => x.IdPregunta.HasValue).Select(x => x.IdPregunta.Value).ToList());
            lPregunta.ForEach(XPregunta => entities.Where(x => x.IdPregunta.HasValue).Where(x => x.IdPregunta == XPregunta.IdPregunta).ToList().ForEach(y => y.Pregunta = XPregunta));

            List<ResOpcMultsEntity> lResOpcMults = ProviderSoftv.ResOpcMults.GetResOpcMults(entities.Where(x => x.Id_ResOpcMult.HasValue).Select(x => x.Id_ResOpcMult.Value).ToList());
            lResOpcMults.ForEach(XResOpcMults => entities.Where(x => x.Id_ResOpcMult.HasValue).Where(x => x.Id_ResOpcMult == XResOpcMults.Id_ResOpcMult).ToList().ForEach(y => y.ResOpcMults = XResOpcMults));

            List<RelEncuestaClientesEntity> lRelEncuestaClientes = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientes(entities.Where(x => x.IdProceso.HasValue).Select(x => x.IdProceso.Value).ToList());
            lRelEncuestaClientes.ForEach(XRelEncuestaClientes => entities.Where(x => x.IdProceso.HasValue).Where(x => x.IdProceso == XRelEncuestaClientes.IdProceso).ToList().ForEach(y => y.RelEncuestaClientes = XRelEncuestaClientes));

            return entities ?? new List<RelEnProcesosEntity>();
        }

        /// <summary>
        ///Get RelEnProcesos List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<RelEnProcesosEntity> GetAll(List<int> lid)
        {
            List<RelEnProcesosEntity> entities = new List<RelEnProcesosEntity>();
            entities = ProviderSoftv.RelEnProcesos.GetRelEnProcesos(lid);
            return entities ?? new List<RelEnProcesosEntity>();
        }

        /// <summary>
        ///Get RelEnProcesos By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static RelEnProcesosEntity GetOne(int? IdProceso)
        {
            RelEnProcesosEntity result = ProviderSoftv.RelEnProcesos.GetRelEnProcesosById(IdProceso);

            if (result.IdPregunta != null)
                result.Pregunta = ProviderSoftv.Pregunta.GetPreguntaById(result.IdPregunta);

            if (result.Id_ResOpcMult != null)
                result.ResOpcMults = ProviderSoftv.ResOpcMults.GetResOpcMultsById(result.Id_ResOpcMult);

            if (result.IdProceso != null)
                result.RelEncuestaClientes = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientesById(result.IdProceso);

            return result;
        }

        /// <summary>
        ///Get RelEnProcesos By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static RelEnProcesosEntity GetOneDeep(int? IdProceso)
        {
            RelEnProcesosEntity result = ProviderSoftv.RelEnProcesos.GetRelEnProcesosById(IdProceso);

            if (result.IdPregunta != null)
                result.Pregunta = ProviderSoftv.Pregunta.GetPreguntaById(result.IdPregunta);

            if (result.Id_ResOpcMult != null)
                result.ResOpcMults = ProviderSoftv.ResOpcMults.GetResOpcMultsById(result.Id_ResOpcMult);

            if (result.IdProceso != null)
                result.RelEncuestaClientes = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientesById(result.IdProceso);

            return result;
        }

        public static List<RelEnProcesosEntity> GetRelEnProcesosByIdPregunta(int? IdPregunta)
        {
            List<RelEnProcesosEntity> entities = new List<RelEnProcesosEntity>();
            entities = ProviderSoftv.RelEnProcesos.GetRelEnProcesosByIdPregunta(IdPregunta);
            return entities ?? new List<RelEnProcesosEntity>();
        }

        public static List<RelEnProcesosEntity> GetRelEnProcesosById_ResOpcMult(int? Id_ResOpcMult)
        {
            List<RelEnProcesosEntity> entities = new List<RelEnProcesosEntity>();
            entities = ProviderSoftv.RelEnProcesos.GetRelEnProcesosById_ResOpcMult(Id_ResOpcMult);
            return entities ?? new List<RelEnProcesosEntity>();
        }

        public static List<RelEnProcesosEntity> GetRelEnProcesosByIdProceso(int? IdProceso)
        {
            List<RelEnProcesosEntity> entities = new List<RelEnProcesosEntity>();
            entities = ProviderSoftv.RelEnProcesos.GetRelEnProcesosByIdProceso(IdProceso);
            return entities ?? new List<RelEnProcesosEntity>();
        }



        /// <summary>
        ///Get RelEnProcesos
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<RelEnProcesosEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<RelEnProcesosEntity> entities = new SoftvList<RelEnProcesosEntity>();
            entities = ProviderSoftv.RelEnProcesos.GetPagedList(pageIndex, pageSize);

            List<PreguntaEntity> lPregunta = ProviderSoftv.Pregunta.GetPregunta(entities.Where(x => x.IdPregunta.HasValue).Select(x => x.IdPregunta.Value).Distinct().ToList());
            lPregunta.ForEach(XPregunta => entities.Where(x => x.IdPregunta.HasValue).Where(x => x.IdPregunta == XPregunta.IdPregunta).ToList().ForEach(y => y.Pregunta = XPregunta));

            List<ResOpcMultsEntity> lResOpcMults = ProviderSoftv.ResOpcMults.GetResOpcMults(entities.Where(x => x.Id_ResOpcMult.HasValue).Select(x => x.Id_ResOpcMult.Value).Distinct().ToList());
            lResOpcMults.ForEach(XResOpcMults => entities.Where(x => x.Id_ResOpcMult.HasValue).Where(x => x.Id_ResOpcMult == XResOpcMults.Id_ResOpcMult).ToList().ForEach(y => y.ResOpcMults = XResOpcMults));

            List<RelEncuestaClientesEntity> lRelEncuestaClientes = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientes(entities.Where(x => x.IdProceso.HasValue).Select(x => x.IdProceso.Value).Distinct().ToList());
            lRelEncuestaClientes.ForEach(XRelEncuestaClientes => entities.Where(x => x.IdProceso.HasValue).Where(x => x.IdProceso == XRelEncuestaClientes.IdProceso).ToList().ForEach(y => y.RelEncuestaClientes = XRelEncuestaClientes));

            return entities ?? new SoftvList<RelEnProcesosEntity>();
        }

        /// <summary>
        ///Get RelEnProcesos
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<RelEnProcesosEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<RelEnProcesosEntity> entities = new SoftvList<RelEnProcesosEntity>();
            entities = ProviderSoftv.RelEnProcesos.GetPagedList(pageIndex, pageSize, xml);

            List<PreguntaEntity> lPregunta = ProviderSoftv.Pregunta.GetPregunta(entities.Where(x => x.IdPregunta.HasValue).Select(x => x.IdPregunta.Value).Distinct().ToList());
            lPregunta.ForEach(XPregunta => entities.Where(x => x.IdPregunta.HasValue).Where(x => x.IdPregunta == XPregunta.IdPregunta).ToList().ForEach(y => y.Pregunta = XPregunta));

            List<ResOpcMultsEntity> lResOpcMults = ProviderSoftv.ResOpcMults.GetResOpcMults(entities.Where(x => x.Id_ResOpcMult.HasValue).Select(x => x.Id_ResOpcMult.Value).Distinct().ToList());
            lResOpcMults.ForEach(XResOpcMults => entities.Where(x => x.Id_ResOpcMult.HasValue).Where(x => x.Id_ResOpcMult == XResOpcMults.Id_ResOpcMult).ToList().ForEach(y => y.ResOpcMults = XResOpcMults));

            List<RelEncuestaClientesEntity> lRelEncuestaClientes = ProviderSoftv.RelEncuestaClientes.GetRelEncuestaClientes(entities.Where(x => x.IdProceso.HasValue).Select(x => x.IdProceso.Value).Distinct().ToList());
            lRelEncuestaClientes.ForEach(XRelEncuestaClientes => entities.Where(x => x.IdProceso.HasValue).Where(x => x.IdProceso == XRelEncuestaClientes.IdProceso).ToList().ForEach(y => y.RelEncuestaClientes = XRelEncuestaClientes));

            return entities ?? new SoftvList<RelEnProcesosEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
