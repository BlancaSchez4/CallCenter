
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.CIUDADProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : CIUDAD Provider
    /// File                    : CIUDADProvider.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:40 p. m.
    /// </summary>
    public abstract class CIUDADProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of CIUDAD from DB
        /// </summary>
        private static CIUDADProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a CIUDAD instance
        /// </summary>
        public static CIUDADProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.CIUDAD.Assembly,
                    SoftvSettings.Settings.CIUDAD.DataClass);
                    _Instance = (CIUDADProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public CIUDADProvider()
        {
        }
        /// <summary>
        /// Abstract method to add CIUDAD
        ///  /summary>
        /// <param name="CIUDAD"></param>
        /// <returns></returns>
        public abstract int AddCIUDAD(CIUDADEntity entity_CIUDAD);

        /// <summary>
        /// Abstract method to delete CIUDAD
        /// </summary>
        public abstract int DeleteCIUDAD(int? Clv_Ciudad);

        /// <summary>
        /// Abstract method to update CIUDAD
        /// </summary>
        public abstract int EditCIUDAD(CIUDADEntity entity_CIUDAD);

        /// <summary>
        /// Abstract method to get all CIUDAD
        /// </summary>
        public abstract List<CIUDADEntity> GetCIUDAD();

        /// <summary>
        /// Abstract method to get all CIUDAD List<int> lid
        /// </summary>
        public abstract List<CIUDADEntity> GetCIUDAD(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract CIUDADEntity GetCIUDADById(int? Clv_Ciudad);


        public abstract List<CIUDADEntity> GetCIUDADByClv_Ciudad(int? Clv_Ciudad);


        /// <summary>
        ///Get CIUDAD
        ///</summary>
        public abstract SoftvList<CIUDADEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get CIUDAD
        ///</summary>
        public abstract SoftvList<CIUDADEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual CIUDADEntity GetCIUDADFromReader(IDataReader reader)
        {
            CIUDADEntity entity_CIUDAD = null;
            try
            {
                entity_CIUDAD = new CIUDADEntity();
                entity_CIUDAD.Clv_Ciudad = (int?)(GetFromReader(reader, "Clv_Ciudad"));
                entity_CIUDAD.Nombre = (String)(GetFromReader(reader, "Nombre", IsString: true));
                entity_CIUDAD.CobroEspecial = (int?)(GetFromReader(reader, "CobroEspecial"));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting CIUDAD data to entity", ex);
            }
            return entity_CIUDAD;
        }

    }

    #region Customs Methods

    #endregion
}

