
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.ConexionProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Conexion Provider
    /// File                    : ConexionProvider.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:21 p. m.
    /// </summary>
    public abstract class ConexionProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of Conexion from DB
        /// </summary>
        private static ConexionProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a Conexion instance
        /// </summary>
        public static ConexionProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.Conexion.Assembly,
                    SoftvSettings.Settings.Conexion.DataClass);
                    _Instance = (ConexionProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public ConexionProvider()
        {
        }
        /// <summary>
        /// Abstract method to add Conexion
        ///  /summary>
        /// <param name="Conexion"></param>
        /// <returns></returns>
        public abstract int AddConexion(ConexionEntity entity_Conexion);

        /// <summary>
        /// Abstract method to delete Conexion
        /// </summary>
        public abstract int DeleteConexion(int? IdConexion);

        /// <summary>
        /// Abstract method to update Conexion
        /// </summary>
        public abstract int EditConexion(ConexionEntity entity_Conexion);

        /// <summary>
        /// Abstract method to get all Conexion
        /// </summary>
        public abstract List<ConexionEntity> GetConexion();

        /// <summary>
        /// Abstract method to get all Conexion List<int> lid
        /// </summary>
        public abstract List<ConexionEntity> GetConexion(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract ConexionEntity GetConexionById(int? IdConexion);


        public abstract List<ConexionEntity> GetConexionByIdConexion(int? IdConexion);


        /// <summary>
        ///Get Conexion
        ///</summary>
        public abstract SoftvList<ConexionEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get Conexion
        ///</summary>
        public abstract SoftvList<ConexionEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual ConexionEntity GetConexionFromReader(IDataReader reader)
        {
            ConexionEntity entity_Conexion = null;
            try
            {
                entity_Conexion = new ConexionEntity();
                entity_Conexion.IdConexion = (int?)(GetFromReader(reader, "IdConexion"));
                entity_Conexion.Plaza = (String)(GetFromReader(reader, "Plaza", IsString: true));
                entity_Conexion.Servidor = (String)(GetFromReader(reader, "Servidor", IsString: true));
                entity_Conexion.BaseDeDatos = (String)(GetFromReader(reader, "BaseDeDatos", IsString: true));
                entity_Conexion.Usuario = (String)(GetFromReader(reader, "Usuario", IsString: true));
                entity_Conexion.Password = (String)(GetFromReader(reader, "Password", IsString: true));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting Conexion data to entity", ex);
            }
            return entity_Conexion;
        }

    }

    #region Customs Methods

    #endregion
}

