
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.TrabajoProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Trabajo Provider
    /// File                    : TrabajoProvider.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:21 p. m.
    /// </summary>
    public abstract class TrabajoProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of Trabajo from DB
        /// </summary>
        private static TrabajoProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a Trabajo instance
        /// </summary>
        public static TrabajoProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.Trabajo.Assembly,
                    SoftvSettings.Settings.Trabajo.DataClass);
                    _Instance = (TrabajoProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public TrabajoProvider()
        {
        }
        /// <summary>
        /// Abstract method to add Trabajo
        ///  /summary>
        /// <param name="Trabajo"></param>
        /// <returns></returns>
        public abstract int AddTrabajo(TrabajoEntity entity_Trabajo);

        /// <summary>
        /// Abstract method to delete Trabajo
        /// </summary>
        public abstract int DeleteTrabajo(int? Clv_Trabajo);

        /// <summary>
        /// Abstract method to update Trabajo
        /// </summary>
        public abstract int EditTrabajo(TrabajoEntity entity_Trabajo);

        /// <summary>
        /// Abstract method to get all Trabajo
        /// </summary>
        public abstract List<TrabajoEntity> GetTrabajo();

        /// <summary>
        /// Abstract method to get all Trabajo List<int> lid
        /// </summary>
        public abstract List<TrabajoEntity> GetTrabajo(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract TrabajoEntity GetTrabajoById(int? Clv_Trabajo);


        public abstract List<TrabajoEntity> GetTrabajoByClv_Trabajo(int? Clv_Trabajo);


        /// <summary>
        ///Get Trabajo
        ///</summary>
        public abstract SoftvList<TrabajoEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get Trabajo
        ///</summary>
        public abstract SoftvList<TrabajoEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual TrabajoEntity GetTrabajoFromReader(IDataReader reader)
        {
            TrabajoEntity entity_Trabajo = null;
            try
            {
                entity_Trabajo = new TrabajoEntity();
                entity_Trabajo.Clv_Trabajo = (int?)(GetFromReader(reader, "Clv_Trabajo"));
                entity_Trabajo.TRABAJO = (String)(GetFromReader(reader, "TRABAJO", IsString: true));
                entity_Trabajo.Clv_TipSer = (int?)(GetFromReader(reader, "Clv_TipSer"));
                entity_Trabajo.DESCRIPCION = (String)(GetFromReader(reader, "DESCRIPCION", IsString: true));
                entity_Trabajo.PUNTOS = (Decimal?)(GetFromReader(reader, "PUNTOS"));
                entity_Trabajo.Cobranza = (bool?)(GetFromReader(reader, "Cobranza"));
                entity_Trabajo.Tipo = (String)(GetFromReader(reader, "Tipo", IsString: true));
                entity_Trabajo.Prospectos = (bool?)(GetFromReader(reader, "Prospectos"));
                entity_Trabajo.SICA = (bool?)(GetFromReader(reader, "SICA"));
                entity_Trabajo.SeCobraMaterial = (bool?)(GetFromReader(reader, "SeCobraMaterial"));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting Trabajo data to entity", ex);
            }
            return entity_Trabajo;
        }

    }

    #region Customs Methods

    #endregion
}

