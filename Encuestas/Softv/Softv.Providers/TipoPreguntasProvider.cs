
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.TipoPreguntasProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : TipoPreguntas Provider
    /// File                    : TipoPreguntasProvider.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:15 p. m.
    /// </summary>
    public abstract class TipoPreguntasProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of TipoPreguntas from DB
        /// </summary>
        private static TipoPreguntasProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a TipoPreguntas instance
        /// </summary>
        public static TipoPreguntasProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.TipoPreguntas.Assembly,
                    SoftvSettings.Settings.TipoPreguntas.DataClass);
                    _Instance = (TipoPreguntasProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public TipoPreguntasProvider()
        {
        }
        /// <summary>
        /// Abstract method to add TipoPreguntas
        ///  /summary>
        /// <param name="TipoPreguntas"></param>
        /// <returns></returns>
        public abstract int AddTipoPreguntas(TipoPreguntasEntity entity_TipoPreguntas);

        /// <summary>
        /// Abstract method to delete TipoPreguntas
        /// </summary>
        public abstract int DeleteTipoPreguntas(int? IdTipoPregunta);

        /// <summary>
        /// Abstract method to update TipoPreguntas
        /// </summary>
        public abstract int EditTipoPreguntas(TipoPreguntasEntity entity_TipoPreguntas);

        /// <summary>
        /// Abstract method to get all TipoPreguntas
        /// </summary>
        public abstract List<TipoPreguntasEntity> GetTipoPreguntas();

        /// <summary>
        /// Abstract method to get all TipoPreguntas List<int> lid
        /// </summary>
        public abstract List<TipoPreguntasEntity> GetTipoPreguntas(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract TipoPreguntasEntity GetTipoPreguntasById(int? IdTipoPregunta);


        public abstract List<TipoPreguntasEntity> GetTipoPreguntasByIdTipoPregunta(int? IdTipoPregunta);


        /// <summary>
        ///Get TipoPreguntas
        ///</summary>
        public abstract SoftvList<TipoPreguntasEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get TipoPreguntas
        ///</summary>
        public abstract SoftvList<TipoPreguntasEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual TipoPreguntasEntity GetTipoPreguntasFromReader(IDataReader reader)
        {
            TipoPreguntasEntity entity_TipoPreguntas = null;
            try
            {
                entity_TipoPreguntas = new TipoPreguntasEntity();
                entity_TipoPreguntas.IdTipoPregunta = (int?)(GetFromReader(reader, "IdTipoPregunta"));
                entity_TipoPreguntas.Descripcion = (String)(GetFromReader(reader, "Descripcion", IsString: true));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting TipoPreguntas data to entity", ex);
            }
            return entity_TipoPreguntas;
        }

    }

    #region Customs Methods

    #endregion
}

