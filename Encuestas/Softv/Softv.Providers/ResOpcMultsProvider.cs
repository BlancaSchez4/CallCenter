
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.ResOpcMultsProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : ResOpcMults Provider
    /// File                    : ResOpcMultsProvider.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:17 p. m.
    /// </summary>
    public abstract class ResOpcMultsProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of ResOpcMults from DB
        /// </summary>
        private static ResOpcMultsProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a ResOpcMults instance
        /// </summary>
        public static ResOpcMultsProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.ResOpcMults.Assembly,
                    SoftvSettings.Settings.ResOpcMults.DataClass);
                    _Instance = (ResOpcMultsProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public ResOpcMultsProvider()
        {
        }
        /// <summary>
        /// Abstract method to add ResOpcMults
        ///  /summary>
        /// <param name="ResOpcMults"></param>
        /// <returns></returns>
        public abstract int AddResOpcMults(ResOpcMultsEntity entity_ResOpcMults);

        /// <summary>
        /// Abstract method to delete ResOpcMults
        /// </summary>
        public abstract int DeleteResOpcMults(int? Id_ResOpcMult);

        /// <summary>
        /// Abstract method to update ResOpcMults
        /// </summary>
        public abstract int EditResOpcMults(ResOpcMultsEntity entity_ResOpcMults);

        /// <summary>
        /// Abstract method to get all ResOpcMults
        /// </summary>
        public abstract List<ResOpcMultsEntity> GetResOpcMults();

        /// <summary>
        /// Abstract method to get all ResOpcMults List<int> lid
        /// </summary>
        public abstract List<ResOpcMultsEntity> GetResOpcMults(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract ResOpcMultsEntity GetResOpcMultsById(int? Id_ResOpcMult);


        public abstract List<ResOpcMultsEntity> GetResOpcMultsById_ResOpcMult(int? Id_ResOpcMult);



        /// <summary>
        ///Get ResOpcMults
        ///</summary>
        public abstract SoftvList<ResOpcMultsEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get ResOpcMults
        ///</summary>
        public abstract SoftvList<ResOpcMultsEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual ResOpcMultsEntity GetResOpcMultsFromReader(IDataReader reader)
        {
            ResOpcMultsEntity entity_ResOpcMults = null;
            try
            {
                entity_ResOpcMults = new ResOpcMultsEntity();
                entity_ResOpcMults.Id_ResOpcMult = (int?)(GetFromReader(reader, "Id_ResOpcMult"));
                entity_ResOpcMults.ResOpcMult = (String)(GetFromReader(reader, "ResOpcMult", IsString: true));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting ResOpcMults data to entity", ex);
            }
            return entity_ResOpcMults;
        }

    }

    #region Customs Methods

    #endregion
}

