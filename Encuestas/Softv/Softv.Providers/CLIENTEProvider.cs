
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.CLIENTEProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : CLIENTE Provider
    /// File                    : CLIENTEProvider.cs
    /// Creation date           : 02/05/2016
    /// Creation time           : 06:30 p. m.
    /// </summary>
    public abstract class CLIENTEProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of CLIENTE from DB
        /// </summary>
        private static CLIENTEProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a CLIENTE instance
        /// </summary>
        public static CLIENTEProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.CLIENTE.Assembly,
                    SoftvSettings.Settings.CLIENTE.DataClass);
                    _Instance = (CLIENTEProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public CLIENTEProvider()
        {
        }
        /// <summary>
        /// Abstract method to add CLIENTE
        ///  /summary>
        /// <param name="CLIENTE"></param>
        /// <returns></returns>
        public abstract int AddCLIENTE(CLIENTEEntity entity_CLIENTE);

        /// <summary>
        /// Abstract method to delete CLIENTE
        /// </summary>
        public abstract int DeleteCLIENTE(long? CONTRATO);

        /// <summary>
        /// Abstract method to update CLIENTE
        /// </summary>
        public abstract int EditCLIENTE(CLIENTEEntity entity_CLIENTE);

        /// <summary>
        /// Abstract method to get all CLIENTE
        /// </summary>
        public abstract List<CLIENTEEntity> GetCLIENTE();

        /// <summary>
        /// Abstract method to get all CLIENTE List<int> lid
        /// </summary>
        public abstract List<CLIENTEEntity> GetCLIENTE(List<long> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract CLIENTEEntity GetCLIENTEById(long? CONTRATO);


        public abstract List<CLIENTEEntity> GetCLIENTEByContrato(long? CONTRATO);


        /// <summary>
        ///Get CLIENTE
        ///</summary>
        public abstract SoftvList<CLIENTEEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get CLIENTE
        ///</summary>
        public abstract SoftvList<CLIENTEEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual CLIENTEEntity GetCLIENTEFromReader(IDataReader reader)
        {
            CLIENTEEntity entity_CLIENTE = null;
            try
            {
                entity_CLIENTE = new CLIENTEEntity();
                entity_CLIENTE.CONTRATO = (long?)(GetFromReader(reader, "CONTRATO"));
                entity_CLIENTE.NOMBRE = (String)(GetFromReader(reader, "NOMBRE", IsString: true));
                entity_CLIENTE.Clv_Calle = (int?)(GetFromReader(reader, "Clv_Calle"));
                entity_CLIENTE.NUMERO = (String)(GetFromReader(reader, "NUMERO", IsString: true));
                entity_CLIENTE.ENTRECALLES = (String)(GetFromReader(reader, "ENTRECALLES", IsString: true));
                entity_CLIENTE.Clv_Colonia = (int?)(GetFromReader(reader, "Clv_Colonia"));
                entity_CLIENTE.CodigoPostal = (String)(GetFromReader(reader, "CodigoPostal", IsString: true));
                entity_CLIENTE.TELEFONO = (String)(GetFromReader(reader, "TELEFONO", IsString: true));
                entity_CLIENTE.CELULAR = (String)(GetFromReader(reader, "CELULAR", IsString: true));
                entity_CLIENTE.DESGLOSA_Iva = (bool?)(GetFromReader(reader, "DESGLOSA_Iva"));
                entity_CLIENTE.SoloInternet = (bool?)(GetFromReader(reader, "SoloInternet"));
                entity_CLIENTE.eshotel = (bool?)(GetFromReader(reader, "eshotel"));
                entity_CLIENTE.Clv_Ciudad = (int?)(GetFromReader(reader, "Clv_Ciudad"));
                entity_CLIENTE.Email = (String)(GetFromReader(reader, "Email", IsString: true));
                entity_CLIENTE.clv_sector = (int?)(GetFromReader(reader, "clv_sector"));
                entity_CLIENTE.Clv_Periodo = (int?)(GetFromReader(reader, "Clv_Periodo"));
                entity_CLIENTE.Clv_Tap = (int?)(GetFromReader(reader, "Clv_Tap"));
                entity_CLIENTE.Zona2 = (bool?)(GetFromReader(reader, "Zona2"));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting CLIENTE data to entity", ex);
            }
            return entity_CLIENTE;
        }

    }

    #region Customs Methods

    #endregion
}

