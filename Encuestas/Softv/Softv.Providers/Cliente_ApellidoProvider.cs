
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.Cliente_ApellidoProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Cliente_Apellido Provider
    /// File                    : Cliente_ApellidoProvider.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:30 p. m.
    /// </summary>
    public abstract class Cliente_ApellidoProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of Cliente_Apellido from DB
        /// </summary>
        private static Cliente_ApellidoProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a Cliente_Apellido instance
        /// </summary>
        public static Cliente_ApellidoProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.Cliente_Apellido.Assembly,
                    SoftvSettings.Settings.Cliente_Apellido.DataClass);
                    _Instance = (Cliente_ApellidoProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public Cliente_ApellidoProvider()
        {
        }
        /// <summary>
        /// Abstract method to add Cliente_Apellido
        ///  /summary>
        /// <param name="Cliente_Apellido"></param>
        /// <returns></returns>
        public abstract int AddCliente_Apellido(Cliente_ApellidoEntity entity_Cliente_Apellido);

        /// <summary>
        /// Abstract method to delete Cliente_Apellido
        /// </summary>
        public abstract int DeleteCliente_Apellido(long? Contrato);

        /// <summary>
        /// Abstract method to update Cliente_Apellido
        /// </summary>
        public abstract int EditCliente_Apellido(Cliente_ApellidoEntity entity_Cliente_Apellido);

        /// <summary>
        /// Abstract method to get all Cliente_Apellido
        /// </summary>
        public abstract List<Cliente_ApellidoEntity> GetCliente_Apellido();

        /// <summary>
        /// Abstract method to get all Cliente_Apellido List<int> lid
        /// </summary>
        public abstract List<Cliente_ApellidoEntity> GetCliente_Apellido(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract Cliente_ApellidoEntity GetCliente_ApellidoById(long? Contrato);



        /// <summary>
        ///Get Cliente_Apellido
        ///</summary>
        public abstract SoftvList<Cliente_ApellidoEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get Cliente_Apellido
        ///</summary>
        public abstract SoftvList<Cliente_ApellidoEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual Cliente_ApellidoEntity GetCliente_ApellidoFromReader(IDataReader reader)
        {
            Cliente_ApellidoEntity entity_Cliente_Apellido = null;
            try
            {
                entity_Cliente_Apellido = new Cliente_ApellidoEntity();
                entity_Cliente_Apellido.Contrato = (long?)(GetFromReader(reader, "Contrato"));
                entity_Cliente_Apellido.Nombre = (String)(GetFromReader(reader, "Nombre", IsString: true));
                entity_Cliente_Apellido.SegundoNombre = (String)(GetFromReader(reader, "SegundoNombre", IsString: true));
                entity_Cliente_Apellido.Apellido_Paterno = (String)(GetFromReader(reader, "Apellido_Paterno", IsString: true));
                entity_Cliente_Apellido.Apellido_Materno = (String)(GetFromReader(reader, "Apellido_Materno", IsString: true));
                entity_Cliente_Apellido.FechaNacimiento = (DateTime?)(GetFromReader(reader, "FechaNacimiento"));
                entity_Cliente_Apellido.RFC = (String)(GetFromReader(reader, "RFC", IsString: true));
                entity_Cliente_Apellido.EsFisica = (bool?)(GetFromReader(reader, "EsFisica"));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting Cliente_Apellido data to entity", ex);
            }
            return entity_Cliente_Apellido;
        }

    }

    #region Customs Methods

    #endregion
}

