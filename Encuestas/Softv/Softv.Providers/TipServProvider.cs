
    using System;
    using System.Text;
    using System.Data;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Runtime.Remoting;
    using Softv.Entities;
    using SoftvConfiguration;
    using Globals;

    namespace Softv.Providers
    {
    /// <summary>
    /// Class                   : Softv.Providers.TipServProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : TipServ Provider
    /// File                    : TipServProvider.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 06:40 p. m.
    /// </summary>
    public abstract class TipServProvider : Globals.DataAccess
    {

    /// <summary>
    /// Instance of TipServ from DB
    /// </summary>
    private static TipServProvider _Instance = null;

    private static ObjectHandle obj;
    /// <summary>
    /// Generates a TipServ instance
    /// </summary>
    public static TipServProvider Instance
    {
    get
    {
    if (_Instance == null)
    {
    obj = Activator.CreateInstance(
    SoftvSettings.Settings.TipServ.Assembly,
    SoftvSettings.Settings.TipServ.DataClass);
    _Instance = (TipServProvider)obj.Unwrap();
    }
    return _Instance;
    }
    }

    /// <summary>
    /// Provider's default constructor
    /// </summary>
    public TipServProvider()
    {
    }
    /// <summary>
    /// Abstract method to add TipServ
    ///  /summary>
    /// <param name="TipServ"></param>
    /// <returns></returns>
    public abstract int AddTipServ(TipServEntity entity_TipServ);

    /// <summary>
    /// Abstract method to delete TipServ
    /// </summary>
    public abstract int DeleteTipServ(int? Clv_TipSer);

    /// <summary>
    /// Abstract method to update TipServ
    /// </summary>
    public abstract int EditTipServ(TipServEntity entity_TipServ);

    /// <summary>
    /// Abstract method to get all TipServ
    /// </summary>
    public abstract List<TipServEntity> GetTipServ();

    /// <summary>
    /// Abstract method to get all TipServ List<int> lid
    /// </summary>
    public abstract List<TipServEntity> GetTipServ(List<int> lid);

    /// <summary>
    /// Abstract method to get by id
    /// </summary>
    public abstract TipServEntity GetTipServById(int? Clv_TipSer);

    
          public abstract List<TipServEntity> GetTipServByClv_TipSer(int? Clv_TipSer);          
        

    /// <summary>
    ///Get TipServ
    ///</summary>
    public abstract SoftvList<TipServEntity> GetPagedList(int pageIndex, int pageSize);

    /// <summary>
    ///Get TipServ
    ///</summary>
    public abstract SoftvList<TipServEntity> GetPagedList(int pageIndex, int pageSize,String xml);

    /// <summary>
    /// Converts data from reader to entity
    /// </summary>
    protected virtual TipServEntity GetTipServFromReader(IDataReader reader)
    {
    TipServEntity entity_TipServ = null;
    try
    {
      entity_TipServ = new TipServEntity();
    entity_TipServ.Clv_TipSer = (int?)(GetFromReader(reader,"Clv_TipSer"));
          entity_TipServ.Concepto = (String)(GetFromReader(reader,"Concepto", IsString : true));
        entity_TipServ.Habilitar = (short?)(GetFromReader(reader,"Habilitar"));
          
    }
    catch (Exception ex)
    {
    throw new Exception("Error converting TipServ data to entity", ex);
    }
    return entity_TipServ;
    }
    
    }

    #region Customs Methods
    
    #endregion
    }

  